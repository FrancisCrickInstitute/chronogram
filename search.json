[{"path":"https://franciscrickinstitute.github.io/chronogram/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 chronogram authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/SQL_assembly.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Chronogram assembly from SQL","text":"build chronogram SQL database. use example derived de-identified PITCH dataset available , CC--4.0 licence: https://data.mendeley.com/datasets/fyp26zjgmj/1 Published: 3 November 2021, DOI: 10.17632/fyp26zjgmj.1 Contributors: Rebecca Payne, Susan Hopkins, Victoria Hall, Christina Dold, Christopher Duncan, Alex Richter, Miles Carroll, Gavin Screaton, Thushan de Silva, Lance Turtle, Paul Klenerman, Susanna Dunachie, PITCH Consortium authors. dataset supports Payne et al. Immunogenicity standard extended dosing intervals BNT162b2 mRNA vaccine Cell 2021 NOTE Changes made de-identified public dataset (DOI: 10.17632/fyp26zjgmj.1). public data reports dates MM/YYYY. build chronogram assigned randomly 1-28 DD DD/MM/YYYY dose 1, used available intervals days place remaining data date time. illustration purposes, need plausible DD/MM/YYYY dates - real. public dataset used example (assays included). motivation re-analyse Payne et al. scientific reasons, use example dataset package. Instead consult de-identified Mendeley data (DOI: 10.17632/fyp26zjgmj.1), Cell manuscript’s data code availability statement.","code":"library(chronogram) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(dbplyr) #>  #> Attaching package: 'dbplyr' #> The following objects are masked from 'package:dplyr': #>  #>     ident, sql library(DBI) library(RSQLite) library(ggplot2)"},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/SQL_assembly.html","id":"approach","dir":"Articles","previous_headings":"","what":"Approach","title":"Chronogram assembly from SQL","text":"Use dbplyr extract relevant tibbles existing SQL database. extracted tibbles assembled chronogram constructor functions. Reminder five required inputs: list participant study IDs start date end date metadata, stored identifier #1. Experimental data, stored identifier #1 date sample. 1-3 straightforward, start 4","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/SQL_assembly.html","id":"connect-to-sql-db","dir":"Articles","previous_headings":"Approach","what":"Connect to SQL db","title":"Chronogram assembly from SQL","text":"","code":"## Connect to the sql database ## ## here we use the shipped example database db_file <- system.file(   \"extdata\", \"pitch-database-output.sqlite\",   package = \"chronogram\" )  ## R covers most types of SQL. Here, we use SQLite. pitch_db <- DBI::dbConnect(RSQLite::SQLite(), db_file)  dbplyr::src_dbi(pitch_db) #> src:  sqlite 3.46.0 [/home/runner/work/_temp/Library/chronogram/extdata/pitch-database-output.sqlite] #> tbls: metadata, MSD_data, MSD.data, nAb_data, nAb.data, sqlite_stat1, #>   sqlite_stat4"},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/SQL_assembly.html","id":"get-metadata","dir":"Articles","previous_headings":"Approach","what":"Get metadata","title":"Chronogram assembly from SQL","text":"leaves data SQL db, routes R print first rows. large databases, significant -front filtering can take place, tidyverse verbs work . example, let’s restrict metadata participants single centre. See dbplyr documentation info: https://dbplyr.tidyverse.org/index.html . example small, want move data R, use dbplyr::collect().","code":"metadata <- tbl(   pitch_db,   ## give the name of the SQL table below ##   \"metadata\" )  head(metadata) #> # Source:   SQL [6 x 6] #> # Database: sqlite 3.46.0 [/home/runner/work/_temp/Library/chronogram/extdata/pitch-database-output.sqlite] #>      ID Centre_code Previous_infection Vaccine_interval dose_1_date dose_2_date #>   <int>       <int> <chr>              <chr>                  <dbl>       <dbl> #> 1  4001           4 Y                  LONG                   18615       18699 #> 2  4002           4 Y                  SHORT                  18639       18670 #> 3  4003           4 Y                  LONG                   18597       18667 #> 4  4004           4 Y                  LONG                   18605       18676 #> 5  4005           4 Y                  LONG                   18602       18707 #> 6  4006           4 N                  LONG                   18628       18677 metadata_filt <- tbl(   pitch_db,   ## give the name of the SQL table below ##   \"metadata\" ) %>%   filter(Centre_code == 1)  head(metadata_filt) #> # Source:   SQL [6 x 6] #> # Database: sqlite 3.46.0 [/home/runner/work/_temp/Library/chronogram/extdata/pitch-database-output.sqlite] #>      ID Centre_code Previous_infection Vaccine_interval dose_1_date dose_2_date #>   <int>       <int> <chr>              <chr>                  <dbl>       <dbl> #> 1  1001           1 Y                  LONG                   18639       18704 #> 2  1002           1 Y                  LONG                   18652       18723 #> 3  1003           1 Y                  LONG                   18616       18672 #> 4  1004           1 Y                  LONG                   18651       18722 #> 5  1005           1 Y                  LONG                   18634       18697 #> 6  1007           1 Y                  LONG                   18653       18716 metadata <- tbl(   pitch_db,   ## give the name of the SQL table below ##   \"metadata\" ) %>%   collect()  metadata #> # A tibble: 587 × 6 #>       ID Centre_code Previous_infection Vaccine_interval dose_1_date dose_2_date #>    <int>       <int> <chr>              <chr>                  <dbl>       <dbl> #>  1  4001           4 Y                  LONG                   18615       18699 #>  2  4002           4 Y                  SHORT                  18639       18670 #>  3  4003           4 Y                  LONG                   18597       18667 #>  4  4004           4 Y                  LONG                   18605       18676 #>  5  4005           4 Y                  LONG                   18602       18707 #>  6  4006           4 N                  LONG                   18628       18677 #>  7  4007           4 Y                  LONG                   18611       18682 #>  8  4008           4 Y                  LONG                   18602       18703 #>  9  4009           4 Y                  LONG                   18609       18680 #> 10  4010           4 Y                  LONG                   18614       18685 #> # ℹ 577 more rows"},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/SQL_assembly.html","id":"clean-metadata","dir":"Articles","previous_headings":"Approach > Get metadata","what":"Clean metadata","title":"Chronogram assembly from SQL","text":"dose_1_date dose_2_date columns lost DD-MM-YYYY formatting SQL db constructed. Fix: Precisely cleaning needed study specific.","code":"metadata <- metadata %>%   mutate(across(ends_with(\"date\"), ~     as.Date(.x, origin = \"1970-01-01\")))  ## show the relevant columns ## metadata %>%   select(ID, contains(\"date\")) %>%   head() #> # A tibble: 6 × 3 #>      ID dose_1_date dose_2_date #>   <int> <date>      <date>      #> 1  4001 2020-12-19  2021-03-13  #> 2  4002 2021-01-12  2021-02-12  #> 3  4003 2020-12-01  2021-02-09  #> 4  4004 2020-12-09  2021-02-18  #> 5  4005 2020-12-06  2021-03-21  #> 6  4006 2021-01-01  2021-02-19"},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/SQL_assembly.html","id":"list-of-participant-ids","dir":"Articles","previous_headings":"Approach","what":"List of participant IDs","title":"Chronogram assembly from SQL","text":"Extract SQL’s master table (example, ’s metadata table).","code":"studyId <- metadata$ID"},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/SQL_assembly.html","id":"start-and-end-date","dir":"Articles","previous_headings":"Approach","what":"Start and end date","title":"Chronogram assembly from SQL","text":"can use 1st Jan 2020 (.e. pre-pandemic) start date, date publication end date.","code":"## provide dates as character vectors DDMMYYYY ## start_date <- \"01012020\" end_date <- \"03112021\""},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/SQL_assembly.html","id":"experimental-data","dir":"Articles","previous_headings":"Approach","what":"Experimental data","title":"Chronogram assembly from SQL","text":"small study, want import chronogram format, can `collect()` relevant SQL table, fix formatting ready chronogram assembly. large study want subset available SQL data, consider filtering smaller selection participants, using similar approach `metadata_filt` . extremely large studies, several stages chronogram assembly annotation can computationally expensive. Building chronogram massive studies (>40,000 participants, >2 years) fails “lab issued” laptops. However, enough metadata can pulled R select participants relevant given analysis, analysis-relevant chronogram can build. entirety massive study required, first option swap high-performance compute cluster (high end desktop). second option, break task smaller components, best performed building annotating chronograms ~5000 individuals (total number rows < ~ 1,000,000), writing disk subsequent windowing, filtering, selecting chronograms parallel. third approach take spirit package push computational work SQL server. likely require solution specific study’s SQL flavour, assumes server compute capacity (user permissions utilise), supporting SQL degree (example, tidyverse verbs variably translated SQL flavours) currently beyond scope package team. welcome hearing users approaches larger studies.","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/SQL_assembly.html","id":"neutralisation-data","dir":"Articles","previous_headings":"Approach > Experimental data","what":"Neutralisation data","title":"Chronogram assembly from SQL","text":"","code":"## Collect the experimental data from SQL ## nAb_data <- tbl(   pitch_db,   ## give the name of the SQL table below ##   \"nAb_data\" ) %>%   collect()   ## Again, the date needs re-formatting ## nAb_data %>%   head() #> # A tibble: 6 × 6 #>      ID calendar_date Victoria  Beta Gamma Delta #>   <int>         <dbl>    <int> <int> <int> <chr> #> 1   561         18810       10    10    46 10    #> 2   568         18753       10    10    10 10    #> 3   447         18680       92    10   132 10    #> 4   557            NA      115    10   290 10    #> 5   564         18754       10    10    24 10    #> 6   581         18715       46    10    43 10  nAb_data <- nAb_data %>%   mutate(across(ends_with(\"date\"), ~     as.Date(.x, origin = \"1970-01-01\")))"},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/SQL_assembly.html","id":"msd-data","dir":"Articles","previous_headings":"Approach > Experimental data","what":"MSD data","title":"Chronogram assembly from SQL","text":"","code":"## Collect the experimental data from SQL ## MSD_data <- tbl(   pitch_db,   ## give the name of the SQL table below ##   \"MSD_data\" ) %>%   collect()   ## Again, the date needs re-formatting ## MSD_data %>%   head() #> # A tibble: 6 × 14 #>      ID Cov2_RBD_MSD Cov2_RBD_BAU Cov_2N_MSD Cov_2N_BAU Cov_2S_MSD Cov_2S_BAU #>   <int>        <dbl>        <dbl>      <dbl>      <dbl>      <dbl>      <dbl> #> 1     2       78191.        2127.      170.       0.402    164133.      1480. #> 2     3        6694.         182.       52.7      0.124     14510.       131. #> 3     5      559384.       15215.     4692.      11.1      912009.      8221. #> 4     5       11600.         316.     5261.      12.4       28710.       259. #> 5     5      310782.        8453.     2072.       4.89     531463.      4791. #> 6     8       88388.        2404.     7323.      17.3      217099.      1957. #> # ℹ 7 more variables: HKU1_S <dbl>, MERS_S <dbl>, NL63_S <dbl>, OC43_S <dbl>, #> #   X229E_S <dbl>, Cov_1S <dbl>, calendar_date <dbl>  MSD_data <- MSD_data %>%   mutate(across(ends_with(\"date\"), ~     as.Date(.x, origin = \"1970-01-01\")))"},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/SQL_assembly.html","id":"assemble-chronogram","dir":"Articles","previous_headings":"Approach","what":"Assemble chronogram","title":"Chronogram assembly from SQL","text":"Now relevant objects memory cleaned, can assemble chronogram.","code":"pitch_chronogram <- cg_assemble(   start_date = start_date,   end_date = end_date,   metadata =  metadata,   metadata_ids_col = ID,   calendar_date_col = calendar_date) #> Checking input parameters... #> -- checking start date 01012020 #> -- checking end date 03112021 #> -- checking end date later than start date #> -- checking metadata #> --no experiment data provided. Add later: cg_add_experiment() #> Input checks completed #> Chronogram assembling... #> -- chrongram_skeleton built #> -- chrongram built with metadata #> -- no experiment data provided #>  #> Assembly finished pitch_chronogram <- cg_add_experiment(   pitch_chronogram,   nAb_data )  pitch_chronogram <- cg_add_experiment(   pitch_chronogram,   MSD_data )  pitch_chronogram #> # A tibble:     395,051 × 23 #> # A chronogram: try summary() #>    calendar_date ID    Centre_code Previous_infection Vaccine_interval #>  * <date>        <fct>       <int> <chr>              <chr>            #>  1 2020-01-01    100             0 Y                  LONG             #>  2 2020-01-02    100             0 Y                  LONG             #>  3 2020-01-03    100             0 Y                  LONG             #>  4 2020-01-04    100             0 Y                  LONG             #>  5 2020-01-05    100             0 Y                  LONG             #>  6 2020-01-06    100             0 Y                  LONG             #>  7 2020-01-07    100             0 Y                  LONG             #>  8 2020-01-08    100             0 Y                  LONG             #>  9 2020-01-09    100             0 Y                  LONG             #> 10 2020-01-10    100             0 Y                  LONG             #> # ℹ 395,041 more rows #> # ℹ 18 more variables: dose_1_date <date>, dose_2_date <date>, Victoria <int>, #> #   Beta <int>, Gamma <int>, Delta <chr>, Cov2_RBD_MSD <dbl>, #> #   Cov2_RBD_BAU <dbl>, Cov_2N_MSD <dbl>, Cov_2N_BAU <dbl>, Cov_2S_MSD <dbl>, #> #   Cov_2S_BAU <dbl>, HKU1_S <dbl>, MERS_S <dbl>, NL63_S <dbl>, OC43_S <dbl>, #> #   X229E_S <dbl>, Cov_1S <dbl> #> # ★ Dates: calendar_date      ★ IDs: ID #> # ★ metadata: Centre_code, Previous_infection, Vaccine_interval, dose_1_date, dose_2_date"},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/SQL_assembly.html","id":"annotate-chronogram-and-analyse","dir":"Articles","previous_headings":"Approach","what":"Annotate chronogram and analyse","title":"Chronogram assembly from SQL","text":"Now assembly complete next step annotate chronogram (find label infection episodes, count number exposures vaccination, infection total). Check annotation vignettes usage examples. Let’s plot results un-annotated PITCH dataset.   expected - SARS-CoV-2 binding IgG boosted Covid vaccination, whereas binding IgG OC43’s spike boosted Covid vaccination. NOTE highlighted earlier, changes made de-identified public dataset (DOI: 10.17632/fyp26zjgmj.1). motivation re-analyse Payne et al. scientific reasons, use example dataset package. Instead consult de-identified Mendeley data (DOI: 10.17632/fyp26zjgmj.1), data code availability statement Payne et al. Immunogenicity standard extended dosing intervals BNT162b2 mRNA vaccine Cell 2021.","code":"pitch_chronogram %>%   filter(!is.na(Cov_2S_MSD)) %>%   ggplot(aes(x = calendar_date, y = Cov_2S_MSD)) +   geom_point(shape = 20, alpha = 0.4) +   scale_y_log10() +   facet_grid(. ~ Previous_infection + Vaccine_interval,     labeller = \"label_both\"   ) +   theme_bw() +   labs(main = \"SARS-CoV-2 Spike binding Ab\") ## ----- pitch_chronogram %>%   filter(!is.na(OC43_S)) %>%   ggplot(aes(x = calendar_date, y = OC43_S)) +   geom_point(shape = 20, alpha = 0.4) +   scale_y_log10() +   facet_grid(. ~ Previous_infection + Vaccine_interval,     labeller = \"label_both\"   ) +   theme_bw() +   labs(main = \"OC43 [a common coronavirus] Spike binding Ab\")"},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/SQL_assembly.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Chronogram assembly from SQL","text":"vignette shows stepwise approach move data SQL chronogram. Whilst clean-code study/database specific, re-usable throughout study. suggest combining equivalent code study Rscript - series Rscripts - run non-interactively, example whilst ’re coffee scheduled task.","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/SQL_assembly.html","id":"sessioninfo","dir":"Articles","previous_headings":"","what":"SessionInfo","title":"Chronogram assembly from SQL","text":"","code":"sessionInfo() #> R version 4.4.1 (2024-06-14) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] ggplot2_3.5.1    RSQLite_2.3.7    DBI_1.2.3        dbplyr_2.5.0     #> [5] dplyr_1.1.4      chronogram_1.0.0 #>  #> loaded via a namespace (and not attached): #>  [1] tidyr_1.3.1       sass_0.4.9        utf8_1.2.4        generics_0.1.3    #>  [5] digest_0.6.36     magrittr_2.0.3    timechange_0.3.0  evaluate_0.24.0   #>  [9] grid_4.4.1        fastmap_1.2.0     blob_1.2.4        jsonlite_1.8.8    #> [13] purrr_1.0.2       fansi_1.0.6       scales_1.3.0      textshaping_0.4.0 #> [17] jquerylib_0.1.4   cli_3.6.3         rlang_1.1.4       bit64_4.0.5       #> [21] munsell_0.5.1     withr_3.0.1       cachem_1.1.0      yaml_2.3.10       #> [25] tools_4.4.1       memoise_2.0.1     colorspace_2.1-1  vctrs_0.6.5       #> [29] R6_2.5.1          lifecycle_1.0.4   lubridate_1.9.3   fs_1.6.4          #> [33] bit_4.0.5         ragg_1.3.2        pkgconfig_2.0.3   desc_1.4.3        #> [37] pkgdown_2.1.0     pillar_1.9.0      bslib_0.8.0       gtable_0.3.5      #> [41] glue_1.7.0        systemfonts_1.1.0 highr_0.11        xfun_0.46         #> [45] tibble_3.2.1      tidyselect_1.2.1  knitr_1.48        farver_2.1.2      #> [49] htmltools_0.5.8.1 rmarkdown_2.27    compiler_4.4.1"},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/annotate_episodes.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Annotate episodes","text":"chronogram package provides family functions annotate chronogram. start cg_annotate_. vignette explains use annotation functions. using vignette, consult vignette(\"assembly\").","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/annotate_episodes.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Annotate episodes","text":"use example pre-built chronogram, introduced vignette(\"assembly\"), add example infection data.","code":"library(chronogram) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(ggplot2) library(patchwork) data(built_smallstudy) cg <- built_smallstudy$chronogram infections_to_add <- built_smallstudy$infections_to_add  ## add to chronogram cg <- cg_add_experiment(   cg,   infections_to_add )"},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/annotate_episodes.html","id":"episode-annotation","dir":"Articles","previous_headings":"","what":"Episode annotation","title":"Annotate episodes","text":"Annotation required allow selection sub-cohorts individuals (corresponding dates) relevant test biological hypothesis. episodes, use cg_annotate_episodes_ family perform sequential steps: cg_annotate_episodes_find() used identify episodes infection. reads across several different experiment data types, specified function call: eg. symptoms, PCRs, LFTs SARS-CoV-2. Additionally, cg_annotate_episodes_find() looks backwards forwards time find episodes, commonly molecular testing symptoms commence day. studies, seroconversion method finding episodes (eg seroconversion anti-N IgG SARS-CoV-2). Seroconversion episodes can found cg_annotate_episodes_find_seroconversion(). provide different (often much, much larger) uncertainty around episode start, chronogram handles separate function. cg_annotate_episodes_fill() allow filling specific columns episode (details ). count number episodes (cf cg_annotate_vaccines_count())","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/annotate_episodes.html","id":"worked-example","dir":"Articles","previous_headings":"Episode annotation","what":"Worked example","title":"Annotate episodes","text":"first step find episodes using cg_annotate_episodes_find().  Note participant 1 single infection episode November 2020, testing symptom data different days: use shorter time frame look forwards backwards :  episode_days option sets “gap” look , rather total permitted length episode. example, LFT+ve d-6, symptoms d0, PCR+ d7 collected single episode.","code":"cg_episodes <- cg_annotate_episodes_find(   cg,   infection_cols = c(\"LFT\", \"PCR\", \"symptoms\"),   infection_present = c(\"pos\", \"Post\", \"^severe\") ) #> Parsed: infection_cols and infection_present #>            #> Searching in the [[column]], for the \"text\": #> Loading required namespace: stringr #> stringr::str_detect(.data[[\"LFT\"]], \"pos\") ~ \"yes\" #>  #> stringr::str_detect(.data[[\"PCR\"]], \"Post\") ~ \"yes\" #>  #> stringr::str_detect(.data[[\"symptoms\"]], \"^severe\") ~ \"yes\" #>  #>  #> ...detecting will be exact. #>           Capitals, spelling etc must be precise #> Joining with `by = join_by(calendar_date, elig_study_id)`  cg_episodes %>%   ggplot(     aes(       x = calendar_date,       y = elig_study_id,       label = episode_number     )   ) +   ## now add text to show when episodes occur ##   geom_text(     data = . %>%       group_by(elig_study_id, episode_number) %>%       slice_head(),     col = \"red\", show.legend = FALSE   ) +   theme_bw() #> Warning: Removed 3 rows containing missing values or values outside the scale range #> (`geom_text()`). infections_to_add %>%   filter(elig_study_id == 1) %>%   knitr::kable() cg_short_episode_length <- cg_annotate_episodes_find(   cg,   infection_cols = c(\"LFT\", \"PCR\", \"symptoms\"),   infection_present = c(\"pos\", \"Post\", \"^severe\"),   ## change episode days interval to 7 days ##   episode_days = 7 ) #> Parsed: infection_cols and infection_present #>            #> Searching in the [[column]], for the \"text\": #> stringr::str_detect(.data[[\"LFT\"]], \"pos\") ~ \"yes\" #>  #> stringr::str_detect(.data[[\"PCR\"]], \"Post\") ~ \"yes\" #>  #> stringr::str_detect(.data[[\"symptoms\"]], \"^severe\") ~ \"yes\" #>  #>  #> ...detecting will be exact. #>           Capitals, spelling etc must be precise #> Joining with `by = join_by(calendar_date, elig_study_id)`  cg_short_episode_length %>%   ggplot(     aes(       x = calendar_date,       y = elig_study_id,       label = episode_number     )   ) +   ## now add text to show when episodes occur ##   geom_text(     data = . %>%       group_by(elig_study_id, episode_number) %>%       slice_head(),     col = \"red\", show.legend = FALSE   ) +   scale_fill_grey(end = 0.2, start = 0.8) +   theme_bw() #> Warning: Removed 3 rows containing missing values or values outside the scale range #> (`geom_text()`)."},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/annotate_episodes.html","id":"episode-variant","dir":"Articles","previous_headings":"","what":"Episode variant","title":"Annotate episodes","text":"Next, assign variants. one-size-fits approach holds across pathogens, across studies, across geographic regions. example PCR data available, parse : PCR positivity assign Delta, PCR testing assign Ancestral/Alpha. gives variant call single row cg. can use cg_annotate_episodes_fill() add annotation every row infection episode. Variant calling rarely relies single assay. advocate pragmatic tiered approach. viral sequencing results available use ; PCR (± S gene target failure), use ; absence molecular testing compare episode start dates prevailing variant trends. principle: assay result reported column 1 () experimental data tibbles build cg_assemble() find episodes fill episode_variant_by_seq, episode_variant_by_PCR episode_variant_by_date, fill whole episode, using cg_annotate_episodes_fill(). write case_when() combine episode_variant_by_seq_filled, episode_variant_by_PCR_filled episode_variant_by_date_filled. result trumps results study-dependent. … return column episode_variant_summarised combined, overall assignment (column naming strategy entirely user).","code":"cg_episodes <- cg_episodes %>%   mutate(     episode_variant =       case_when(         # \"is an episode\" & \"PCR positive\" -> Delta #         (!is.na(episode_number)) & PCR == \"Pos\" ~ \"Delta\",         # \"is an episode\" & \"PCR unavailable\" -> Anc/Delta #         (!is.na(episode_number)) & PCR == \"not tested\" ~ \"Anc/Alpha\"       )   ) cg_episodes %>%   filter(!is.na(episode_variant)) %>%   pull(episode_variant) #> [1] \"Anc/Alpha\" \"Anc/Alpha\" \"Delta\" cg_episodes <- cg_episodes %>%   cg_annotate_episodes_fill(     col_to_fill = episode_variant,     col_to_return = episode_variant_filled,     .direction = \"updown\",     episode_numbers_col = episode_number   ) #> Joining with `by = join_by(elig_study_id, episode_number)`   cg_episodes %>%   filter(!is.na(episode_variant_filled)) %>%   pull(episode_variant_filled) #>  [1] \"Anc/Alpha\" \"Anc/Alpha\" \"Anc/Alpha\" \"Anc/Alpha\" \"Anc/Alpha\" \"Anc/Alpha\" #>  [7] \"Anc/Alpha\" \"Anc/Alpha\" \"Anc/Alpha\" \"Anc/Alpha\" \"Anc/Alpha\" \"Anc/Alpha\" #> [13] \"Delta\""},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/annotate_episodes.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Annotate episodes","text":"vignette provided examples cg_annotate family action. conducting multi-pathogen study (RSV, flu, covid), run set cg_annotate family functions pathogen - may wish prefix output columns eg RSV_, flu_ & covid_. differing considerations eg variants, chronogram leaves cg_annotate family without overall wrapper let users easily omit unneeded annotations.","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/annotate_episodes.html","id":"sessioninfo","dir":"Articles","previous_headings":"Summary","what":"SessionInfo","title":"Annotate episodes","text":"","code":"sessionInfo() #> R version 4.4.1 (2024-06-14) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] patchwork_1.2.0  ggplot2_3.5.1    dplyr_1.1.4      chronogram_1.0.0 #>  #> loaded via a namespace (and not attached): #>  [1] gtable_0.3.5      jsonlite_1.8.8    highr_0.11        compiler_4.4.1    #>  [5] tidyselect_1.2.1  stringr_1.5.1     tidyr_1.3.1       jquerylib_0.1.4   #>  [9] systemfonts_1.1.0 scales_1.3.0      textshaping_0.4.0 yaml_2.3.10       #> [13] fastmap_1.2.0     R6_2.5.1          generics_0.1.3    knitr_1.48        #> [17] tibble_3.2.1      desc_1.4.3        munsell_0.5.1     lubridate_1.9.3   #> [21] bslib_0.8.0       pillar_1.9.0      rlang_1.1.4       utf8_1.2.4        #> [25] stringi_1.8.4     cachem_1.1.0      xfun_0.46         fs_1.6.4          #> [29] sass_0.4.9        timechange_0.3.0  cli_3.6.3         pkgdown_2.1.0     #> [33] withr_3.0.1       magrittr_2.0.3    digest_0.6.36     grid_4.4.1        #> [37] lifecycle_1.0.4   vctrs_0.6.5       evaluate_0.24.0   glue_1.7.0        #> [41] farver_2.1.2      ragg_1.3.2        fansi_1.0.6       colorspace_2.1-1  #> [45] purrr_1.0.2       rmarkdown_2.27    tools_4.4.1       pkgconfig_2.0.3   #> [49] htmltools_0.5.8.1"},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/annotate_exposures.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Annotate exposures","text":"chronogram package provides family functions annotate chronogram. start cg_annotate_. vignette explains use annotation functions. using vignette, consult vignette(\"assembly\"). vignette demonstrates annotation exposures. Exposures can either vaccines, infection episodes - require annotation first. See: vignette(\"annotate vaccines\") & vignette(\"annotate episodes\").","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/annotate_exposures.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Annotate exposures","text":"use example pre-built chronogram, introduced vignette(\"assembly\"), vaccines episodes annotated: vignette(\"annotate vaccines\") & vignette(\"annotate episodes\"). code chunk discussed vignettes.","code":"library(chronogram) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(ggplot2) library(patchwork) data(built_smallstudy) cg <- built_smallstudy$chronogram infections_to_add <-  built_smallstudy$infections_to_add  ## add to chronogram cg <- cg_add_experiment(   cg,   infections_to_add )  ## annotate vaccines cg <- cg_annotate_vaccines_count(   cg,   ## the prefix to the dose columns: ##   dose = dose,   ## the output column name: ##   dose_counter = dose_number,   ## the prefix to the date columns: ##   vaccine_date_stem = date_dose,   ## use 14d to 'star' after a dose ##   intermediate_days = 14 ) #> Using stem: date_dose #> Found vaccine dates #> date_dose_1 #>  #> date_dose_2  ## annotate episodes cg <- cg %>%   cg_annotate_episodes_find(   infection_cols = c(\"LFT\", \"PCR\", \"symptoms\"),   infection_present = c(\"pos\", \"Post\", \"^severe\") ) %>%   mutate(     episode_variant =       case_when(         # \"is an episode\" & \"PCR positive\" -> Delta #         (!is.na(episode_number)) & PCR == \"Pos\" ~ \"Delta\",         # \"is an episode\" & \"PCR unavailable\" -> Anc/Delta #         (!is.na(episode_number)) & PCR == \"not tested\" ~ \"Anc/Alpha\"       )   ) %>%   cg_annotate_episodes_fill(     col_to_fill = episode_variant,     col_to_return = episode_variant_filled,     .direction = \"updown\"   ) #> Parsed: infection_cols and infection_present #>            #> Searching in the [[column]], for the \"text\": #> stringr::str_detect(.data[[\"LFT\"]], \"pos\") ~ \"yes\" #>  #> stringr::str_detect(.data[[\"PCR\"]], \"Post\") ~ \"yes\" #>  #> stringr::str_detect(.data[[\"symptoms\"]], \"^severe\") ~ \"yes\" #>  #>  #> ...detecting will be exact. #>           Capitals, spelling etc must be precise #> Joining with `by = join_by(calendar_date, elig_study_id)` #> Joining with `by = join_by(elig_study_id, episode_number)`"},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/annotate_exposures.html","id":"outline","dir":"Articles","previous_headings":"","what":"Outline","title":"Annotate exposures","text":"Annotation required allow selection sub-cohorts individuals (corresponding dates) relevant test biological hypothesis. Exposures can either vaccine doses infection episodes. cg_annotate_exposure_count() provides cumulative counter individual’s personal history. cg_annotate_antigenic_history() returns text string summarising sequence encounters.","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/annotate_exposures.html","id":"worked-example","dir":"Articles","previous_headings":"Outline","what":"Worked example","title":"Annotate exposures","text":"cg_annotate_exposure_count() takes column names episode number, dose number seroconversion episode numbers, calculate per day, per individual running count exposures. cg_annotate_antigenic_history() provides character vector length 1 summarise person’s course study. best explored example, plot.  plot shows infection, vaccination impacts exposure number. participant 3, exposures vaccination, whereas participants 1 2 additional exposures infection. end example, participant 2 experienced 4 encounters Spike, participant 1 3 encounters participant 3 just two vaccination alone.","code":"cg_exposures <- cg %>% cg_annotate_exposures_count(   episode_number = episode_number,   dose_number = dose_number,   ## we have not considered episodes of seroconversion   N_seroconversion_episode_number = NULL )   cg_exposures <- cg_exposures %>%   mutate(     episode_variant_summarised =       episode_variant_filled   ) %>%   cg_annotate_antigenic_history(     episode_number = episode_number,     dose_number = dose_number,     episode_variant_summarised = episode_variant_summarised,     ag_col = antigenic_history   )  ## Plot ## top_panel <- cg_exposures %>%   select(calendar_date,           exposure_number,          elig_study_id,          antigenic_history) %>%   ggplot(aes(     x = calendar_date, y = exposure_number,     col = elig_study_id   )) +   geom_line() +   facet_grid(antigenic_history ~ .)   swimmers_panel <- cg_plot_meta(cg_exposures,   visit = serum_Ab_S ) +   ## set the axes to match top_panel ##   xlim(     min(cg_exposures$calendar_date),     max(cg_exposures$calendar_date)   ) +   scale_y_discrete(limits = factor(c(3, 2, 1))) #> Function provided to illustrate chronogram -> #>           ggplot2 interface. #> Function assumes the #>           presence of {dose_1, date_dose_1, dose_2, date_dose_2} #>           columns. #>           Users are likely to want to write their own, #>           study-specific applications  top_panel / swimmers_panel & theme_bw() &   theme(     legend.position = \"bottom\",     strip.text.y = element_text(angle = 0),     strip.background = element_blank(),     panel.grid.minor = element_blank()   )"},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/annotate_exposures.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Annotate exposures","text":"vignette provided examples cg_annotate family action. conducting multi-pathogen study (RSV, flu, covid), run set cg_annotate family functions pathogen - may wish prefix output columns eg RSV_, flu_ & covid_. differing considerations eg variants, chronogram leaves cg_annotate family without overall wrapper let users easily omit unneeded annotations.","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/annotate_exposures.html","id":"sessioninfo","dir":"Articles","previous_headings":"Summary","what":"SessionInfo","title":"Annotate exposures","text":"","code":"sessionInfo() #> R version 4.4.1 (2024-06-14) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] patchwork_1.2.0  ggplot2_3.5.1    dplyr_1.1.4      chronogram_1.0.0 #>  #> loaded via a namespace (and not attached): #>  [1] gtable_0.3.5      jsonlite_1.8.8    highr_0.11        compiler_4.4.1    #>  [5] tidyselect_1.2.1  stringr_1.5.1     tidyr_1.3.1       jquerylib_0.1.4   #>  [9] systemfonts_1.1.0 scales_1.3.0      textshaping_0.4.0 yaml_2.3.10       #> [13] fastmap_1.2.0     R6_2.5.1          labeling_0.4.3    generics_0.1.3    #> [17] knitr_1.48        tibble_3.2.1      desc_1.4.3        munsell_0.5.1     #> [21] lubridate_1.9.3   bslib_0.8.0       pillar_1.9.0      rlang_1.1.4       #> [25] utf8_1.2.4        stringi_1.8.4     cachem_1.1.0      xfun_0.46         #> [29] fs_1.6.4          sass_0.4.9        timechange_0.3.0  cli_3.6.3         #> [33] pkgdown_2.1.0     withr_3.0.1       magrittr_2.0.3    digest_0.6.36     #> [37] grid_4.4.1        lifecycle_1.0.4   vctrs_0.6.5       evaluate_0.24.0   #> [41] glue_1.7.0        farver_2.1.2      ragg_1.3.2        fansi_1.0.6       #> [45] colorspace_2.1-1  purrr_1.0.2       rmarkdown_2.27    tools_4.4.1       #> [49] pkgconfig_2.0.3   htmltools_0.5.8.1"},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/annotate_vaccines.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Annotate vaccines","text":"chronogram package provides family functions annotate chronogram. start cg_annotate_. vignette explains use annotation functions. using vignette, consult vignette(\"assembly\").","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/annotate_vaccines.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Annotate vaccines","text":"use example pre-built chronogram, introduced vignette(\"assembly\"), add example infection data.","code":"library(chronogram) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(ggplot2) library(patchwork) data(built_smallstudy) cg <- built_smallstudy$chronogram infections_to_add <-  built_smallstudy$infections_to_add  ## add to chronogram cg <- cg_add_experiment(   cg,   infections_to_add )"},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/annotate_vaccines.html","id":"vaccine-annotation","dir":"Articles","previous_headings":"","what":"Vaccine annotation","title":"Annotate vaccines","text":"Annotation required allow selection sub-cohorts individuals (corresponding dates) relevant test biological hypothesis. vaccines, use cg_annotate_vaccines_count() – adds column counts number vaccines participant received time. – includes “star” system, allow first days vaccine easily identified. example, 24hrs first dose vaccine (“1star”) probably biologically reflect dose’s effect. user can set value days “star” suit analysis. cg_annotate_vaccines_count() requires metadata columns follow pattern: dose_1, dose_2, dose_3, …, dose_i date_dose_1, date_dose_2, date_dose_3, …, date_dose_i trailing digit reflects dose number dose_i date_dose_i. {dose} {date_dose} prefixes provided function, shown chunk . might envisage study {sarscov2_dose}, {sarscov2_date_dose}, {influenza_dose} & {influenza_date_dose} two runs cg_annotate_vaccines_count() needed.","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/annotate_vaccines.html","id":"worked-example","dir":"Articles","previous_headings":"Vaccine annotation","what":"Worked example","title":"Annotate vaccines","text":"plot, character vector dose_number coerced factor. resulting levels factor counter-intuitive. improve plot, can manually specify factor:  dose_number column intentionally returned cg character vector rather converting factor. possibility mishandling factor: .numeric(dose_number) == 1, refers situation dose == 0, .numeric(dose_number) == 2, refers situation dose == 1.","code":"cg <- cg_annotate_vaccines_count(   cg,   ## the prefix to the dose columns: ##   dose = dose,   ## the output column name: ##   dose_counter = dose_number,   ## the prefix to the date columns: ##   vaccine_date_stem = date_dose,   ## use 14d to 'star' after a dose ##   intermediate_days = 14 ) #> Using stem: date_dose #> Found vaccine dates #> date_dose_1 #>  #> date_dose_2  ## plot over time ## cg %>%   ggplot(     aes(       x = calendar_date,       y = elig_study_id,       fill = dose_number     )   ) +   geom_tile(height = 0.5) +   scale_fill_grey(end = 0.2, start = 0.8) +   theme_bw() cg %>%   mutate(dose_number = factor(dose_number,     levels = c(       \"0\",       \"1star\",       \"1\",       \"2star\",       \"2\"     )   )) %>%   ggplot(     aes(       x = calendar_date,       y = elig_study_id,       fill = dose_number     )   ) +   geom_tile(height = 0.5) +   scale_fill_grey(end = 0.2, start = 0.8) +   theme_bw()"},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/annotate_vaccines.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Annotate vaccines","text":"vignette provided examples cg_annotate family action. conducting multi-pathogen study (RSV, flu, covid), run set cg_annotate family functions pathogen - may wish prefix output columns eg RSV_, flu_ & covid_.","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/annotate_vaccines.html","id":"sessioninfo","dir":"Articles","previous_headings":"Summary","what":"SessionInfo","title":"Annotate vaccines","text":"","code":"sessionInfo() #> R version 4.4.1 (2024-06-14) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] patchwork_1.2.0  ggplot2_3.5.1    dplyr_1.1.4      chronogram_1.0.0 #>  #> loaded via a namespace (and not attached): #>  [1] gtable_0.3.5      jsonlite_1.8.8    highr_0.11        compiler_4.4.1    #>  [5] tidyselect_1.2.1  stringr_1.5.1     tidyr_1.3.1       jquerylib_0.1.4   #>  [9] systemfonts_1.1.0 scales_1.3.0      textshaping_0.4.0 yaml_2.3.10       #> [13] fastmap_1.2.0     R6_2.5.1          generics_0.1.3    knitr_1.48        #> [17] tibble_3.2.1      desc_1.4.3        munsell_0.5.1     lubridate_1.9.3   #> [21] bslib_0.8.0       pillar_1.9.0      rlang_1.1.4       utf8_1.2.4        #> [25] stringi_1.8.4     cachem_1.1.0      xfun_0.46         fs_1.6.4          #> [29] sass_0.4.9        timechange_0.3.0  cli_3.6.3         pkgdown_2.1.0     #> [33] withr_3.0.1       magrittr_2.0.3    digest_0.6.36     grid_4.4.1        #> [37] lifecycle_1.0.4   vctrs_0.6.5       evaluate_0.24.0   glue_1.7.0        #> [41] farver_2.1.2      ragg_1.3.2        fansi_1.0.6       colorspace_2.1-1  #> [45] purrr_1.0.2       rmarkdown_2.27    tools_4.4.1       pkgconfig_2.0.3   #> [49] htmltools_0.5.8.1"},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/assembly.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Chronogram assembly","text":"chronogram offers dynamic solution real world datasets, limited particular pathogen, vaccine schedule, experimental assay. core functionality chronogram ability expand dates dataset, constructing comprehensive chronological list. structure can prove invaluable, especially scenarios pinpointing precise timepoints essential. , provide illustration incorporate data chronogram. adapted study, code can used extended subsequent data assays become available.","code":"library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(lubridate) #>  #> Attaching package: 'lubridate' #> The following objects are masked from 'package:base': #>  #>     date, intersect, setdiff, union library(chronogram)"},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/assembly.html","id":"tldr","dir":"Articles","previous_headings":"","what":"TLDR","title":"Chronogram assembly","text":"","code":"data(smallstudy)  cg <- cg_assemble(   start_date = \"01012020\",   end_date = \"10102021\",   ## the provided metadata ##   metadata = smallstudy$small_study_metadata,   ## the column name in the metadata that contains participant IDs ##   metadata_ids_col = elig_study_id,   ## column name for dates ##   calendar_date_col = calendar_date,   ## the provided experiment data (we have 1 assay, so a list of 1) ##   experiment_data_list = list(smallstudy$small_study_Ab) ) #> Checking input parameters... #> -- checking start date 01012020 #> -- checking end date 10102021 #> -- checking end date later than start date #> -- checking metadata #> -- checking experiment data list #> --- checking experiment data list slot 1 #> Input checks completed #> Chronogram assembling... #> -- chrongram_skeleton built #> -- chrongram built with metadata #> -- adding experiment data #> --- adding experiment data slot 1 cols... elig_study_id calendar_date serum_Ab_S ...  ## Use cg_add_experiment() for extra assays ##  ## cg_save() and cg_load() offer a route to save to disk ## ## - metadata de-duplicated on disk & cg_load check object ## ## - save() and load() will work but not encouraged ##"},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/assembly.html","id":"requirements","dir":"Articles","previous_headings":"","what":"Requirements","title":"Chronogram assembly","text":"four inputs: start date end date metadata, including column contains participant study IDs OPTIONAL Experimental data, stored identifier #1 date sample. NOTE start date, end date earliest latest data available. example, study collected information prior symptoms enrolment, want include analysis, use suitably early start date. limits number experimental data sources.","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/assembly.html","id":"in-brief","dir":"Articles","previous_headings":"","what":"In brief","title":"Chronogram assembly","text":"cg_assemble() wraps following functions, situations cg_assemble() advised route. vignette, unpack step-wise.","code":"## Fictional example data ## data(smallstudy)  ## 5 requirements ## ids <- smallstudy$small_study_ids  start <- \"01012020\" end <- \"10102021\"  meta <- smallstudy$small_study_metadata ab <- smallstudy$small_study_Ab # here, we just have antibody data   ## Make a chronogram ## small_study <- chronogram_skeleton(   ids = ids,   start_date = start,   end_date = end,   ## change this to your ID column name ##   col_ids = elig_study_id,   ## change this to your date column name ##   col_calendar_date = calendar_date )  small_study <- chronogram(   small_study,   meta )  small_study <- cg_add_experiment(   small_study,   ab )  small_study #> # A tibble:     1,947 × 10 #> # A chronogram: try summary() #>    calendar_date elig_study_id   age sex   dose_1 date_dose_1 dose_2 date_dose_2 #>  * <date>        <fct>         <dbl> <fct> <fct>  <date>      <fct>  <date>      #>  1 2020-01-01    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #>  2 2020-01-02    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #>  3 2020-01-03    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #>  4 2020-01-04    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #>  5 2020-01-05    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #>  6 2020-01-06    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #>  7 2020-01-07    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #>  8 2020-01-08    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #>  9 2020-01-09    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #> 10 2020-01-10    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #> # ℹ 1,937 more rows #> # ℹ 2 more variables: serum_Ab_S <dbl>, serum_Ab_N <dbl> #> # ★ Dates: calendar_date      ★ IDs: elig_study_id #> # ★ metadata: age, sex, dose_1, date_dose_1, dose_2, date_dose_2  ## Use cg_add_experiment() for extra assays ##"},{"path":[]},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/assembly.html","id":"generate-a-chronogram_skeleton-object","dir":"Articles","previous_headings":"Step-by-step","what":"Generate a chronogram_skeleton object","title":"Chronogram assembly","text":"chronogram_skeleton() returns object : - contains two columns: calendar_date (name set col_calendar_date), elig_study_id (name set col_ids). - contains row participant day. Now print, check generated expected results. may want try: View(small_study) via Rstudio. chronogram_skeleton framework onto add metadata, experimental data. provided col_ids col_calendar_date stored attributes small_study, user enter . Chronogram assumes adding data indexed column names. NOTE study may data stored ‘StudyID’ ‘PID’ etc. fine: adjust col_ids = use_whatever_your_StudyID_is. Similarly, study may use ‘date’, ‘date_on_mars’. Adjust: col_calendar_date = use_whatever_your_Study_uses_for_dates. Dates ddmmyyyy format (anything lubridate::dmy() can interpret work). Providing dates formats likely fail error. special case US formatted dates dd<=12 mm<=12: interpreted 12-day interval. Swap ddmmyyy get expected 11 months:","code":"## Fictional example data ## data(smallstudy)  ## 5 requirements ## ids <- smallstudy$small_study_ids  start <- \"01012020\" end <- \"10102021\"  meta <- smallstudy$small_study_metadata ab <- smallstudy$small_study_Ab # here, we just have antibody data   ## Make a chronogram_skeleton ## small_study <- chronogram_skeleton(   ids = ids,   start_date = start,   end_date = end,   ## change this to your ID column name ##   col_ids = elig_study_id,   ## change this to your date column name ##   col_calendar_date = calendar_date ) small_study #> # A tibble: 1,947 × 2 #>    calendar_date elig_study_id #>  * <date>        <fct>         #>  1 2020-01-01    1             #>  2 2020-01-02    1             #>  3 2020-01-03    1             #>  4 2020-01-04    1             #>  5 2020-01-05    1             #>  6 2020-01-06    1             #>  7 2020-01-07    1             #>  8 2020-01-08    1             #>  9 2020-01-09    1             #> 10 2020-01-10    1             #> # ℹ 1,937 more rows chronogram_skeleton(   ids = ids,   start_date = \"01012020\",   ## 1st Dec 2020, provided in mmddyyyy ##   end_date = \"12012020\",   col_ids = elig_study_id,   col_calendar_date = calendar_date ) #> # A tibble: 36 × 2 #>    calendar_date elig_study_id #>  * <date>        <fct>         #>  1 2020-01-01    1             #>  2 2020-01-02    1             #>  3 2020-01-03    1             #>  4 2020-01-04    1             #>  5 2020-01-05    1             #>  6 2020-01-06    1             #>  7 2020-01-07    1             #>  8 2020-01-08    1             #>  9 2020-01-09    1             #> 10 2020-01-10    1             #> # ℹ 26 more rows chronogram_skeleton(   ids = ids,   start_date = \"01012020\",   ## 1st Dec 2020, provided in the correct ddmmyyyy ##   end_date = \"01122020\",   col_ids = elig_study_id,   col_calendar_date = calendar_date ) #> # A tibble: 1,008 × 2 #>    calendar_date elig_study_id #>  * <date>        <fct>         #>  1 2020-01-01    1             #>  2 2020-01-02    1             #>  3 2020-01-03    1             #>  4 2020-01-04    1             #>  5 2020-01-05    1             #>  6 2020-01-06    1             #>  7 2020-01-07    1             #>  8 2020-01-08    1             #>  9 2020-01-09    1             #> 10 2020-01-10    1             #> # ℹ 998 more rows"},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/assembly.html","id":"generate-a-chronogram-object","dir":"Articles","previous_headings":"Step-by-step","what":"Generate a chronogram object","title":"Chronogram assembly","text":", combine outline data structure (chronogram_skeleton object) metadata. line metadata repeated every row individual. shortcut providing useful selecting samples meet particular characteristics (eg antibody testing 14-21d dose 2) plotting based characteristics. extra memory occupied repetition ~25-50kB example. metadata contains age, sex, dates formulations doses 1 2 (values plausible, fictitious). provided metadata tibble, care taken provide columns relevant classes (factors, dates etc). assembly chronogram join chronogram_skeleton metadata.","code":"head(meta) #> # A tibble: 3 × 7 #>   elig_study_id   age sex   dose_1   date_dose_1 dose_2   date_dose_2 #>           <dbl> <dbl> <fct> <fct>    <date>      <fct>    <date>      #> 1             1    40 F     AZD1222  2021-01-05  AZD1222  2021-02-05  #> 2             2    45 F     BNT162b2 2021-01-05  BNT162b2 2021-02-05  #> 3             3    35 M     BNT162b2 2021-01-10  BNT162b2 2021-03-10 small_study <- chronogram(   small_study,   meta ) small_study #> # A tibble:     1,947 × 8 #> # A chronogram: try summary() #>    calendar_date elig_study_id   age sex   dose_1 date_dose_1 dose_2 date_dose_2 #>  * <date>        <fct>         <dbl> <fct> <fct>  <date>      <fct>  <date>      #>  1 2020-01-01    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #>  2 2020-01-02    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #>  3 2020-01-03    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #>  4 2020-01-04    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #>  5 2020-01-05    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #>  6 2020-01-06    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #>  7 2020-01-07    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #>  8 2020-01-08    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #>  9 2020-01-09    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #> 10 2020-01-10    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #> # ℹ 1,937 more rows #> # ★ Dates: calendar_date      ★ IDs: elig_study_id #> # ★ metadata: age, sex, dose_1, date_dose_1, dose_2, date_dose_2"},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/assembly.html","id":"add-experimental-data-to-chronogram-object","dir":"Articles","previous_headings":"Step-by-step","what":"Add experimental data to chronogram object","title":"Chronogram assembly","text":"experimental data provided serum anti-S IgG serum anti-N IgG (: plausible, fictitious). experimental data provided study ID calendar date. data joined variables: column names must match exactly main chronogram. date use date sample, rather assay date (may months years later sample frozen). wary duplicates shared columns adding experimental data - warning provided shared columns. going add just one set experimental data, limit number experiments add. process assumes runs assay added . example, 10 runs anti-S anti-N (.e. 10 objects looked like ab), combine bind_rows() make one long object proceed cg_add_experiment(). might run assay several different materials, anti-S anti-N IgG testing serum mucosal sampling. Labelling data columns system like source_test_type (eg serum_Ab_S vs nasal_Ab_S vs BAL_Ab_S etc) advantageous, makes analysis easier. wanted grab S IgG data, perhaps pass ggplot2, can use small.study %>% select(contains(\"Ab_S\")). mandatory, can still build whatever column names like (aside col_ids col_calendar_date required). complex data reduced single entry (eg. scRNAseq data), adding column like: PBMC_scRNAseq = run/not_run, useful can handily subset final chronogram object looks like colData annData Bioconductor’s 10x analysis, Seurat, scanpy: small_study %>% filter(PBMC_scRNAseq == \"run\"). data already SQL (similar) database, see assembly SQL vignette.","code":"head(ab) #> # A tibble: 6 × 4 #>   elig_study_id calendar_date serum_Ab_S serum_Ab_N #>           <dbl> <date>             <dbl>      <dbl> #> 1             1 2021-01-05           500        100 #> 2             1 2021-01-15          4000        100 #> 3             1 2021-02-03          3750        100 #> 4             1 2021-02-15         10000        100 #> 5             2 2021-01-05             0          0 #> 6             2 2021-01-15          2000          0 small_study <- cg_add_experiment(   small_study,   ab )  small_study #> # A tibble:     1,947 × 10 #> # A chronogram: try summary() #>    calendar_date elig_study_id   age sex   dose_1 date_dose_1 dose_2 date_dose_2 #>  * <date>        <fct>         <dbl> <fct> <fct>  <date>      <fct>  <date>      #>  1 2020-01-01    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #>  2 2020-01-02    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #>  3 2020-01-03    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #>  4 2020-01-04    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #>  5 2020-01-05    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #>  6 2020-01-06    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #>  7 2020-01-07    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #>  8 2020-01-08    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #>  9 2020-01-09    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #> 10 2020-01-10    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #> # ℹ 1,937 more rows #> # ℹ 2 more variables: serum_Ab_S <dbl>, serum_Ab_N <dbl> #> # ★ Dates: calendar_date      ★ IDs: elig_study_id #> # ★ metadata: age, sex, dose_1, date_dose_1, dose_2, date_dose_2  ## Use cg_add_experiment() for extra assays ##"},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/assembly.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Chronogram assembly","text":"constructed chronogram small study n=3 individuals simple set metadata single experimental assay.","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/assembly.html","id":"sessioninfo","dir":"Articles","previous_headings":"","what":"SessionInfo","title":"Chronogram assembly","text":"","code":"sessionInfo() #> R version 4.4.1 (2024-06-14) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] chronogram_1.0.0 lubridate_1.9.3  dplyr_1.1.4      #>  #> loaded via a namespace (and not attached): #>  [1] vctrs_0.6.5       cli_3.6.3         knitr_1.48        rlang_1.1.4       #>  [5] xfun_0.46         purrr_1.0.2       generics_0.1.3    textshaping_0.4.0 #>  [9] jsonlite_1.8.8    glue_1.7.0        htmltools_0.5.8.1 ragg_1.3.2        #> [13] sass_0.4.9        fansi_1.0.6       rmarkdown_2.27    tibble_3.2.1      #> [17] evaluate_0.24.0   jquerylib_0.1.4   fastmap_1.2.0     yaml_2.3.10       #> [21] lifecycle_1.0.4   compiler_4.4.1    fs_1.6.4          timechange_0.3.0  #> [25] pkgconfig_2.0.3   tidyr_1.3.1       systemfonts_1.1.0 digest_0.6.36     #> [29] R6_2.5.1          tidyselect_1.2.1  utf8_1.2.4        pillar_1.9.0      #> [33] magrittr_2.0.3    bslib_0.8.0       withr_3.0.1       tools_4.4.1       #> [37] pkgdown_2.1.0     cachem_1.1.0      desc_1.4.3"},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/chronogram.html","id":"load-libraries","dir":"Articles","previous_headings":"","what":"Load libraries","title":"Quickstart","text":"","code":"library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(ggplot2) library(patchwork) library(chronogram)"},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/chronogram.html","id":"construct-a-chronogram","dir":"Articles","previous_headings":"","what":"Construct a chronogram","title":"Quickstart","text":"Use cg_assemble() create chronogram cleaned input data. print(), glimpse() summary() help explore resulting chronogram. (View() works , shown vignette).","code":"## Fictional example data ## data(smallstudy)   cg <- cg_assemble(   start_date = \"01012020\",   end_date = \"10102021\",   ## the provided metadata ##   metadata = smallstudy$small_study_metadata,   ## the column name in the metadata that contains participant IDs ##   metadata_ids_col = elig_study_id,   ## column name for dates ##   calendar_date_col = calendar_date,   ## the provided experiment data (we have 1 assay, so a list of 1) ##   experiment_data_list = list(smallstudy$small_study_Ab) ) #> Checking input parameters... #> -- checking start date 01012020 #> -- checking end date 10102021 #> -- checking end date later than start date #> -- checking metadata #> -- checking experiment data list #> --- checking experiment data list slot 1 #> Input checks completed #> Chronogram assembling... #> -- chrongram_skeleton built #> -- chrongram built with metadata #> -- adding experiment data #> --- adding experiment data slot 1 cols... elig_study_id calendar_date serum_Ab_S ... print(cg) #> # A tibble:     1,947 × 10 #> # A chronogram: try summary() #>    calendar_date elig_study_id   age sex   dose_1 date_dose_1 dose_2 date_dose_2 #>  * <date>        <fct>         <dbl> <fct> <fct>  <date>      <fct>  <date>      #>  1 2020-01-01    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #>  2 2020-01-02    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #>  3 2020-01-03    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #>  4 2020-01-04    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #>  5 2020-01-05    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #>  6 2020-01-06    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #>  7 2020-01-07    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #>  8 2020-01-08    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #>  9 2020-01-09    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #> 10 2020-01-10    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #> # ℹ 1,937 more rows #> # ℹ 2 more variables: serum_Ab_S <dbl>, serum_Ab_N <dbl> #> # ★ Dates: calendar_date      ★ IDs: elig_study_id #> # ★ metadata: age, sex, dose_1, date_dose_1, dose_2, date_dose_2  glimpse(cg) #> Glimpse: chronogram  #>  Dates column:  calendar_date  #>  IDs column:    elig_study_id  #>  #> Metadata #> Rows: 1,947 #> Columns: 6 #> $ age         <dbl> 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40… #> $ sex         <fct> F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F… #> $ dose_1      <fct> AZD1222, AZD1222, AZD1222, AZD1222, AZD1222, AZD1222, AZD1… #> $ date_dose_1 <date> 2021-01-05, 2021-01-05, 2021-01-05, 2021-01-05, 2021-01-0… #> $ dose_2      <fct> AZD1222, AZD1222, AZD1222, AZD1222, AZD1222, AZD1222, AZD1… #> $ date_dose_2 <date> 2021-02-05, 2021-02-05, 2021-02-05, 2021-02-05, 2021-02-0… #>  #> Experiment data & annotations #> Rows: 1,947 #> Columns: 2 #> $ serum_Ab_S <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ serum_Ab_N <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…  summary(cg) #> A chronogram: #>  Dates column:  calendar_date  #>  IDs column:    elig_study_id  #>  Starts on:     2020-01-01  #>  Ends on:       2021-10-10  #>  Contains:      3  unique participant IDs #>  Windowed:      FALSE  #>  Spanning:      649 - 649 days [min-max per participant] #>  Metadata:      age, sex, dose_1, date_dose_1, dose_2, date_dose_2  #>  Size:          129.55 kB  #>  Pkg_version:   1.0.0 [used to build this cg]"},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/chronogram.html","id":"plot-trajectories","dir":"Articles","previous_headings":"","what":"Plot trajectories","title":"Quickstart","text":"Plot antibody responses time individual using cg_plot().  Plot swimmers plot visualise individual’s sequence events within study, using cg_plot_meta().","code":"traj <- cg_plot(cg,   y_values = serum_Ab_S ) #> Function provided to illustrate chronogram -> #>           ggplot2 interface. #>           Users are likely to want to write their own, #>           study-specific applications  traj swimmer <- cg_plot_meta(cg,   visit = serum_Ab_S ) #> Function provided to illustrate chronogram -> #>           ggplot2 interface. #> Function assumes the #>           presence of {dose_1, date_dose_1, dose_2, date_dose_2} #>           columns. #>           Users are likely to want to write their own, #>           study-specific applications  swimmer"},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/chronogram.html","id":"customise-plots","dir":"Articles","previous_headings":"Plot trajectories","what":"Customise plots","title":"Quickstart","text":"Using ggplot2 patchwork customisations.","code":"lay <- \" a a a b \" (   (traj + labs(y = \"anti-S IgG\") + scale_y_log10()) /     (swimmer + theme(axis.text.y = element_blank())) ) +   plot_layout(design = lay) &   plot_annotation(tag_levels = \"A\") &   theme_bw(base_size = 8) &   theme(legend.position = \"none\") &   theme(plot.tag = element_text(size = 16, face = \"bold\")) &   labs(x = \"date\") #> Warning in scale_y_log10(): log-10 transformation introduced infinite values. #> log-10 transformation introduced infinite values."},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/chronogram.html","id":"annotate-a-chronogram","dir":"Articles","previous_headings":"","what":"Annotate a chronogram","title":"Quickstart","text":"suite functions find, label count infection episodes. aggregate across different experiment data columns, symptoms, PCRs, viral sequencing. See annotation vignette.","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/chronogram.html","id":"window-a-chronogram","dir":"Articles","previous_headings":"","what":"Window a chronogram","title":"Quickstart","text":", pick dates relation dose 2, using cg_window_by_metadata().","code":"## upto 50d after dose 2 ## cg_after_dose_2 <- cg_window_by_metadata(cg,   windowing_date_col = date_dose_2,   preceding_days = 0,   following_days = 50 )  ## upto 21d before dose 2 ## cg_before_dose_2 <- cg_window_by_metadata(cg,   windowing_date_col = date_dose_2,   preceding_days = 21,   following_days = 0 )   cg_after_dose_2 <- cg_after_dose_2 %>% mutate(cohort = \"post D2\")  cg_before_dose_2 <- cg_before_dose_2 %>% mutate(cohort = \"pre D2\")  cg_dose_2 <- bind_rows(cg_after_dose_2, cg_before_dose_2)  cg_dose_2 <- cg_dose_2 %>% mutate(   cohort =     factor(cohort,       levels = c(         \"pre D2\",         \"post D2\"       )     ) )"},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/chronogram.html","id":"re-plot-the-windowed-data","dir":"Articles","previous_headings":"Window a chronogram","what":"Re-plot the windowed data","title":"Quickstart","text":"Note participant 3, sample ~50d dose 2 now excluded.","code":"traj_2 <- cg_dose_2 %>%   cg_plot(.,     y_values = serum_Ab_S   ) #> Function provided to illustrate chronogram -> #>           ggplot2 interface. #>           Users are likely to want to write their own, #>           study-specific applications  pd <- position_dodge(0.4)  violin_2 <- cg_dose_2 %>%   ## geom_line fails if lots of NA rows provided ##   filter(!is.na(serum_Ab_S)) %>%   ggplot(aes(     x = cohort, y = serum_Ab_S,     group = elig_study_id   )) +   geom_point(position = pd) +   geom_line(position = pd)  swimmer_2 <- cg_plot_meta(cg_dose_2,   visit = serum_Ab_S ) #> Function provided to illustrate chronogram -> #>           ggplot2 interface. #> Function assumes the #>           presence of {dose_1, date_dose_1, dose_2, date_dose_2} #>           columns. #>           Users are likely to want to write their own, #>           study-specific applications   lay2 <- \" aac aac aa# bb# \"  (   (traj_2 +     labs(y = \"anti-S IgG\", x = \"date\") +     scale_y_log10()) +     (swimmer_2 +       labs(x = \"date\") +       theme(axis.text.y = element_blank())) +     (violin_2 +       labs(y = \"anti-S IgG\") +       scale_y_continuous(trans = \"log10\") +       annotation_logticks(sides = \"l\")) ) +   plot_layout(design = lay2) &   plot_annotation(tag_levels = \"A\") &   theme_bw(base_size = 8) &   theme(legend.position = \"none\") &   theme(plot.tag = element_text(size = 16, face = \"bold\"))"},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/chronogram.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Quickstart","text":"Chronogram now assembled relevant data answer (simple) biological question (dose 2 boost anti-S IgG?) retrieved, plotted readied statistical test. Please see vignettes deeper demonstration chronogram functions.","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/chronogram.html","id":"sessioninfo","dir":"Articles","previous_headings":"","what":"SessionInfo","title":"Quickstart","text":"","code":"sessionInfo() #> R version 4.4.1 (2024-06-14) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] chronogram_1.0.0 patchwork_1.2.0  ggplot2_3.5.1    dplyr_1.1.4      #>  #> loaded via a namespace (and not attached): #>  [1] gtable_0.3.5      jsonlite_1.8.8    highr_0.11        compiler_4.4.1    #>  [5] tidyselect_1.2.1  tidyr_1.3.1       jquerylib_0.1.4   systemfonts_1.1.0 #>  [9] scales_1.3.0      textshaping_0.4.0 yaml_2.3.10       fastmap_1.2.0     #> [13] lobstr_1.1.2      R6_2.5.1          labeling_0.4.3    generics_0.1.3    #> [17] knitr_1.48        tibble_3.2.1      desc_1.4.3        munsell_0.5.1     #> [21] lubridate_1.9.3   bslib_0.8.0       pillar_1.9.0      rlang_1.1.4       #> [25] utf8_1.2.4        cachem_1.1.0      xfun_0.46         fs_1.6.4          #> [29] sass_0.4.9        timechange_0.3.0  cli_3.6.3         pkgdown_2.1.0     #> [33] withr_3.0.1       magrittr_2.0.3    digest_0.6.36     grid_4.4.1        #> [37] lifecycle_1.0.4   vctrs_0.6.5       evaluate_0.24.0   glue_1.7.0        #> [41] farver_2.1.2      ragg_1.3.2        fansi_1.0.6       colorspace_2.1-1  #> [45] purrr_1.0.2       rmarkdown_2.27    tools_4.4.1       pkgconfig_2.0.3   #> [49] htmltools_0.5.8.1"},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/chronogram_class.html","id":"the-chronogram-class","dir":"Articles","previous_headings":"","what":"The chronogram class","title":"Introducing the chronogram class","text":"chronogram class extends tibble dplyr. chronogram class: asserts combination date participant ID can single row. uses attributes slots store names columns containing index dates, participant IDs, metadata columns. chronogram package provides column names chronogram functions. uses `pillar` package customise printing chronogram related grouped chronogram class, allows group_by() subsequent tidyverse verbs work expect.","code":"library(chronogram) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(lubridate) #>  #> Attaching package: 'lubridate' #> The following objects are masked from 'package:base': #>  #>     date, intersect, setdiff, union library(tidyr) library(knitr)"},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/chronogram_class.html","id":"differences-between-chronogram-and-tibble-classes","dir":"Articles","previous_headings":"","what":"Differences between chronogram and tibble classes","title":"Introducing the chronogram class","text":"use simple example dataset illustrate differences. next create chronogram (class chronogram), chronogram-like object (class tibble). Using chronogram assembly: Using tibble-based assembly: Whilst classes different, containing data identical, arranged equivalently: Although setup code feels similar either approach, chronogram class checks input data. Using chronogram assembly: Using tibble-based assembly:","code":"## a 3m window for this particular chronogram ## start_date <- \"01012020\" end_date <- \"01042020\" ## load example metadata ## data(\"smallstudy\") metadata <- smallstudy$small_study_metadata  knitr::kable(metadata) cg <- chronogram::cg_assemble(   start_date = start_date,   end_date = end_date,   metadata = metadata,   metadata_ids_col = elig_study_id,   calendar_date_col = calendar_date ) #> Checking input parameters... #> -- checking start date 01012020 #> -- checking end date 01042020 #> -- checking end date later than start date #> -- checking metadata #> --no experiment data provided. Add later: cg_add_experiment() #> Input checks completed #> Chronogram assembling... #> -- chrongram_skeleton built #> -- chrongram built with metadata #> -- no experiment data provided #>  #> Assembly finished  cg #> # A tibble:     276 × 8 #> # A chronogram: try summary() #>    calendar_date elig_study_id   age sex   dose_1 date_dose_1 dose_2 date_dose_2 #>  * <date>        <fct>         <dbl> <fct> <fct>  <date>      <fct>  <date>      #>  1 2020-01-01    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #>  2 2020-01-02    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #>  3 2020-01-03    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #>  4 2020-01-04    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #>  5 2020-01-05    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #>  6 2020-01-06    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #>  7 2020-01-07    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #>  8 2020-01-08    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #>  9 2020-01-09    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #> 10 2020-01-10    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #> # ℹ 266 more rows #> # ★ Dates: calendar_date      ★ IDs: elig_study_id #> # ★ metadata: age, sex, dose_1, date_dose_1, dose_2, date_dose_2 cg_tibble <-    tidyr::crossing(     calendar_date = seq.Date(       lubridate::dmy(start_date),       lubridate::dmy(end_date),       by = 1),     elig_study_id = metadata$elig_study_id) %>%   left_join(metadata) #> Joining with `by = join_by(elig_study_id)`  cg_tibble #> # A tibble: 276 × 8 #>    calendar_date elig_study_id   age sex   dose_1 date_dose_1 dose_2 date_dose_2 #>    <date>                <dbl> <dbl> <fct> <fct>  <date>      <fct>  <date>      #>  1 2020-01-01                1    40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #>  2 2020-01-01                2    45 F     BNT16… 2021-01-05  BNT16… 2021-02-05  #>  3 2020-01-01                3    35 M     BNT16… 2021-01-10  BNT16… 2021-03-10  #>  4 2020-01-02                1    40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #>  5 2020-01-02                2    45 F     BNT16… 2021-01-05  BNT16… 2021-02-05  #>  6 2020-01-02                3    35 M     BNT16… 2021-01-10  BNT16… 2021-03-10  #>  7 2020-01-03                1    40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #>  8 2020-01-03                2    45 F     BNT16… 2021-01-05  BNT16… 2021-02-05  #>  9 2020-01-03                3    35 M     BNT16… 2021-01-10  BNT16… 2021-03-10  #> 10 2020-01-04                1    40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #> # ℹ 266 more rows all(   cg_tibble %>%    group_by(elig_study_id) %>%   arrange(calendar_date, .by_group = TRUE) ==        cg %>% as_tibble() ) #> [1] TRUE ## create example metadata, with a duplicated row ## metadata_duplicated_row <-    dplyr::bind_rows(     metadata,              metadata %>% slice_tail() )  knitr::kable(metadata_duplicated_row) cg_fail <- try(   chronogram::cg_assemble(   start_date = start_date,   end_date = end_date,   ## use the new metadata ##   metadata = metadata_duplicated_row,   metadata_ids_col = elig_study_id,   calendar_date_col = calendar_date ) ) #> Checking input parameters... #> -- checking start date 01012020 #> -- checking end date 01042020 #> -- checking end date later than start date #> -- checking metadata #> --no experiment data provided. Add later: cg_add_experiment() #> Input checks completed #> Chronogram assembling... #> Warning in chronogram_skeleton(start_date = start_date, end_date = end_date, : Duplicate IDs found :  3 Check your input ID vector... #>       provide a unique identifier for #>       each individual #> Returning a de-duplicated chronogram_skeleton... #> -- chrongram_skeleton built #> Error in check_metadata(x = metadata, cg_skeleton = cg_skeleton) :  #>   { .... is not TRUE  cg_fail #> [1] \"Error in check_metadata(x = metadata, cg_skeleton = cg_skeleton) : \\n  { .... is not TRUE\\n\" #> attr(,\"class\") #> [1] \"try-error\" #> attr(,\"condition\") #> <simpleError in check_metadata(x = metadata, cg_skeleton = cg_skeleton): { .... is not TRUE> cg_tibble <-    tidyr::crossing(     calendar_date = seq.Date(       lubridate::dmy(start_date),       lubridate::dmy(end_date),       by = 1),     elig_study_id = metadata_duplicated_row$elig_study_id) %>%   left_join(metadata_duplicated_row) #> Joining with `by = join_by(elig_study_id)` #> Warning in left_join(., metadata_duplicated_row): Detected an unexpected many-to-many relationship between `x` and `y`. #> ℹ Row 3 of `x` matches multiple rows in `y`. #> ℹ Row 1 of `y` matches multiple rows in `x`. #> ℹ If a many-to-many relationship is expected, set `relationship = #>   \"many-to-many\"` to silence this warning.  cg_tibble #> # A tibble: 368 × 8 #>    calendar_date elig_study_id   age sex   dose_1 date_dose_1 dose_2 date_dose_2 #>    <date>                <dbl> <dbl> <fct> <fct>  <date>      <fct>  <date>      #>  1 2020-01-01                1    40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #>  2 2020-01-01                2    45 F     BNT16… 2021-01-05  BNT16… 2021-02-05  #>  3 2020-01-01                3    35 M     BNT16… 2021-01-10  BNT16… 2021-03-10  #>  4 2020-01-01                3    35 M     BNT16… 2021-01-10  BNT16… 2021-03-10  #>  5 2020-01-02                1    40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #>  6 2020-01-02                2    45 F     BNT16… 2021-01-05  BNT16… 2021-02-05  #>  7 2020-01-02                3    35 M     BNT16… 2021-01-10  BNT16… 2021-03-10  #>  8 2020-01-02                3    35 M     BNT16… 2021-01-10  BNT16… 2021-03-10  #>  9 2020-01-03                1    40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #> 10 2020-01-03                2    45 F     BNT16… 2021-01-05  BNT16… 2021-02-05  #> # ℹ 358 more rows"},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/chronogram_class.html","id":"validating-a-chronogram","dir":"Articles","previous_headings":"","what":"Validating a chronogram","title":"Introducing the chronogram class","text":"chronogram::validate_chronogram() can used check chronogram correct. tibble version expectedly fails: can intentionally break row “rule” combination date x participant ID can appear , . Example 1 Example 2 Chronogram assembly annotation functions use validate_chronogram() maintain row “rule” combination date x participant ID can present , absent.","code":"try(   validate_chronogram(cg_tibble) ## fails ) #> Error in validate_chronogram(cg_tibble) :  #>   Invalid chronogram: Wrong class. Create with 'chronogram()'  validate_chronogram(cg) ## returns TRUE #> [1] TRUE ## break \"rule\" one way ##------------------------------------------------------------ not_a_cg <- bind_rows(cg,                        cg)  try(   validate_chronogram(not_a_cg) ) #> Error in validate_chronogram(not_a_cg) :  #>   Invalid chronogram: Dates are duplicated for IDs ## break \"rule\" a different way ##---------------------------------------------------- ## this extra data will create 2 rows for ID==1 on 1st Jan 2020 ## data_to_join <- tibble::tribble(   ~calendar_date, ~elig_study_id, ~new_info,   \"01012020\",     1,              \"a\",   \"01012020\",     1,              \"b\" )  data_to_join <- data_to_join %>%   mutate(calendar_date = lubridate::dmy(calendar_date)) %>%   mutate(elig_study_id = factor(elig_study_id))  ## using the provided method, cg_add_experiment() ## errors, with an appropriate message try(   cg_add_experiment(cg, data_to_join) ) #> Error in check_experiment(x = experiment, cg = cg) :  #>   Invalid experiment: date:ids are duplicated  ## we can use a dplyr::join ## still_not_a_cg <- right_join(data_to_join, cg) #> Joining with `by = join_by(calendar_date, elig_study_id)` still_not_a_cg_left <- left_join(cg, data_to_join) #> Joining with `by = join_by(calendar_date, elig_study_id)` ## when joining by two columns, the 1:many warning is not emitted ## an extra row is gained: nrow(still_not_a_cg) #> [1] 277 nrow(still_not_a_cg_left) #> [1] 277 nrow(cg) #> [1] 276  try(   validate_chronogram(still_not_a_cg) ) #> Error in validate_chronogram(still_not_a_cg) :  #>   Invalid chronogram: Wrong class. Create with 'chronogram()' class(still_not_a_cg) #> [1] \"tbl_df\"     \"tbl\"        \"data.frame\"  try(   validate_chronogram(still_not_a_cg_left) ) #> Error in validate_chronogram(still_not_a_cg_left) :  #>   Invalid chronogram: Dates are duplicated for IDs class(still_not_a_cg_left) # left_join inherits class from first argument #> [1] \"cg_tbl\"     \"tbl_df\"     \"tbl\"        \"data.frame\""},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/chronogram_class.html","id":"chronogram-attributes","dir":"Articles","previous_headings":"","what":"Chronogram attributes","title":"Introducing the chronogram class","text":"spare user repetitively specifying names used columns storing participant IDs calendar dates, stored attribute slots. slots examined chronogram functions use relevant columns per-date per-individual operations. user can explore attributes: , simply:","code":"attribs <- attributes(cg)  ## attribs is a named list: class(attribs) #> [1] \"list\" names(attribs) #> [1] \"names\"             \"row.names\"         \"class\"             #> [4] \"col_calendar_date\" \"col_ids\"           \"cg_pkg_version\"    #> [7] \"windowed\"          \"cols_metadata\"  ## print those attributes with names starting \"col\" attribs [ grepl(names(attribs), pattern = \"^col\")] #> $col_calendar_date #> [1] \"calendar_date\" #>  #> $col_ids #> [1] \"elig_study_id\" #>  #> $cols_metadata #> [1] \"age\"         \"sex\"         \"dose_1\"      \"date_dose_1\" \"dose_2\"      #> [6] \"date_dose_2\" summary(cg) #> A chronogram: #>  Dates column:  calendar_date  #>  IDs column:    elig_study_id  #>  Starts on:     2020-01-01  #>  Ends on:       2020-04-01  #>  Contains:      3  unique participant IDs #>  Windowed:      FALSE  #>  Spanning:      92 - 92 days [min-max per participant] #>  Metadata:      age, sex, dose_1, date_dose_1, dose_2, date_dose_2  #>  Size:          17.82 kB  #>  Pkg_version:   1.0.0 [used to build this cg]  print(cg) #> # A tibble:     276 × 8 #> # A chronogram: try summary() #>    calendar_date elig_study_id   age sex   dose_1 date_dose_1 dose_2 date_dose_2 #>  * <date>        <fct>         <dbl> <fct> <fct>  <date>      <fct>  <date>      #>  1 2020-01-01    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #>  2 2020-01-02    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #>  3 2020-01-03    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #>  4 2020-01-04    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #>  5 2020-01-05    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #>  6 2020-01-06    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #>  7 2020-01-07    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #>  8 2020-01-08    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #>  9 2020-01-09    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #> 10 2020-01-10    1                40 F     AZD12… 2021-01-05  AZD12… 2021-02-05  #> # ℹ 266 more rows #> # ★ Dates: calendar_date      ★ IDs: elig_study_id #> # ★ metadata: age, sex, dose_1, date_dose_1, dose_2, date_dose_2  glimpse(cg) ## no experiment data added to this chronogram #> Glimpse: chronogram  #>  Dates column:  calendar_date  #>  IDs column:    elig_study_id  #>  #> Metadata #> Rows: 276 #> Columns: 6 #> $ age         <dbl> 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40… #> $ sex         <fct> F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F… #> $ dose_1      <fct> AZD1222, AZD1222, AZD1222, AZD1222, AZD1222, AZD1222, AZD1… #> $ date_dose_1 <date> 2021-01-05, 2021-01-05, 2021-01-05, 2021-01-05, 2021-01-0… #> $ dose_2      <fct> AZD1222, AZD1222, AZD1222, AZD1222, AZD1222, AZD1222, AZD1… #> $ date_dose_2 <date> 2021-02-05, 2021-02-05, 2021-02-05, 2021-02-05, 2021-02-0… #>  #> Experiment data & annotations #> Rows: 276 #> Columns: 0"},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/chronogram_class.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Introducing the chronogram class","text":"Chronogram subclass tibble, allows additional checks validity. found assemblying data rows present {ID x date} combination sequential joins prone duplicating rows. chronogram development, opted assert condition {ID x date} combination present , absent. wanted avoid altering handling “conventional” tibble, extended sub-class.","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/stats.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Chronogram statistics","text":"vignette, explore prepare chronogram data statistical testing. take chronogram perform filtering, windowing selecting prior illustrative plot statistical test. NOTE vignette cover statistical test appropriate, R functions (arguments) particular statistical test.","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/stats.html","id":"libraries","dir":"Articles","previous_headings":"Introduction","what":"Libraries","title":"Chronogram statistics","text":"","code":"library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(rstatix) # pipe-friendly stats functions #>  #> Attaching package: 'rstatix' #> The following object is masked from 'package:stats': #>  #>     filter library(broom) # tidy handling of lm() output library(ggrepel) # repelled labels in ggplot2 #> Loading required package: ggplot2 library(survival) # time-to-event analysis library(survminer) # ggplot2 from time-to-event #> Loading required package: ggpubr #>  #> Attaching package: 'survminer' #> The following object is masked from 'package:survival': #>  #>     myeloma library(chronogram)"},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/stats.html","id":"wilcoxon-test","dir":"Articles","previous_headings":"","what":"Wilcoxon test","title":"Chronogram statistics","text":"Hypothesis individuals without prior exposure, long interval (8-12w) doses 1 2 mRNA vaccine higher antibody levels 3-5w dose 2, individuals following short interval (3-4w). response variable MSD SARS-CoV-2 Spike antibody (CoV_2S_MSD). categorical predictor LONG SHORT interval (Vaccine_interval metadata). data PITCH, introduced assembled SQL vignette.","code":"data(\"pitch_chronogram\")  ## filter, select, window ## windowed_data <- pitch_chronogram %>%   filter(Previous_infection == \"N\") %>%   cg_window_by_metadata(dose_2_date,                          preceding_days = -21,                          following_days = 35) %>%   cg_select_visit(visit_col = Cov_2S_BAU,                   visit = \"latest\") ## plot ## windowed_data %>%   ggplot(aes(x = Vaccine_interval, y = Cov_2S_MSD)) +   geom_point(shape = 20, alpha = 0.4,              position = position_jitter(0.3)) +   stat_summary(     geom = \"point\",     fun = \"median\",     shape = 5,     size = 2,     stroke = 1.5,     col = \"dodgerblue\") +   theme_bw() ## stats ## windowed_data %>%   wilcox_test(Cov_2S_MSD ~ Vaccine_interval) ## rstatix::wilcox_test #> # A tibble: 1 × 7 #>   .y.        group1 group2    n1    n2 statistic       p #> * <chr>      <chr>  <chr>  <int> <int>     <dbl>   <dbl> #> 1 Cov_2S_MSD LONG   SHORT    124    37      3117 0.00095"},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/stats.html","id":"linear-regression","dir":"Articles","previous_headings":"","what":"Linear regression","title":"Chronogram statistics","text":"Hypothesis SARS-CoV-2 Spike antibody dependent vaccine interval, previous infection, study centre. response variable MSD SARS-CoV-2 Spike (CoV_2S_MSD). predictors LONG SHORT interval (Vaccine_interval metadata). study centre (Centre_code metadata). Previous infection (Y/N Previous_infection metadata). data PITCH, introduced assembled SQL vignette.","code":"data(\"pitch_chronogram\")  ## filter, select, window ## windowed_data <- pitch_chronogram %>%   cg_window_by_metadata(dose_2_date,                          preceding_days = -21,                          following_days = 35) %>%   cg_select_visit(visit_col = Cov_2S_BAU,                   visit = \"latest\") ## plot ## windowed_data %>%   ggplot(aes(x = Centre_code, y = Cov_2S_MSD)) +   geom_point(shape = 20, alpha = 0.4,              position = position_jitter(0.3)) +   stat_summary(     geom = \"point\",     fun = \"median\",     shape = 5,     size = 2,     stroke = 1.5,     col = \"dodgerblue\") +   facet_grid(. ~Vaccine_interval + Previous_infection ) +   theme_bw() ## stats ## lm_res <- windowed_data %>%   lm(Cov_2S_MSD ~         Vaccine_interval +         Previous_infection +         Centre_code, data = .)  ## results from lm ## summary(lm_res) #>  #> Call: #> lm(formula = Cov_2S_MSD ~ Vaccine_interval + Previous_infection +  #>     Centre_code, data = .) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -435977 -187858  -77071   92963 1410750  #>  #> Coefficients: #>                       Estimate Std. Error t value Pr(>|t|)     #> (Intercept)             273547      32450   8.430 1.41e-15 *** #> Vaccine_intervalSHORT   -21186      47969  -0.442    0.659     #> Previous_infectionY     152471      33969   4.489 1.02e-05 *** #> Centre_code              21256      12996   1.636    0.103     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 290300 on 304 degrees of freedom #> Multiple R-squared:  0.08457,    Adjusted R-squared:  0.07554  #> F-statistic: 9.362 on 3 and 304 DF,  p-value: 6.161e-06  ## easier to read, and plot from broom::tidy ## tidy(lm_res) #> # A tibble: 4 × 5 #>   term                  estimate std.error statistic  p.value #>   <chr>                    <dbl>     <dbl>     <dbl>    <dbl> #> 1 (Intercept)            273547.    32450.     8.43  1.41e-15 #> 2 Vaccine_intervalSHORT  -21186.    47969.    -0.442 6.59e- 1 #> 3 Previous_infectionY    152471.    33969.     4.49  1.02e- 5 #> 4 Centre_code             21256.    12996.     1.64  1.03e- 1  tidy(lm_res) %>%   filter(term != \"(Intercept)\") %>%   ggplot(aes(x=estimate, y = -log10(p.value),          label = term)) +   geom_point() +   geom_text_repel() +   geom_hline(yintercept = -log10(0.05),               linetype = 3)"},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/stats.html","id":"linear-regression-with-interaction-terms","dir":"Articles","previous_headings":"Linear regression","what":"Linear regression with interaction terms","title":"Chronogram statistics","text":"Setup Linear regression example . Since nearly SHORT interval data single centre, add interaction term centre interval.  model Cov_2S_MSD ~ Previous_infection + Vaccine_interval * Centre_code, interaction term interval centre performs reasonably, neglible effect assigned centre alone, larger effects assigned vaccine interval previous infection. ANOVA, Cov_2S_MSD ~ Previous_infection + Vaccine_interval * Centre_code performs better Cov_2S_MSD ~ Previous_infection + Vaccine_interval + Centre_code: Either model describes ~10% total variance Spike antibodies:","code":"## stats - lm with interaction terms ## ## note the * lm_res_interactions <- windowed_data %>%   lm(Cov_2S_MSD ~         Previous_infection +        Vaccine_interval *         Centre_code, data = .)  ## results from lm ## summary(lm_res_interactions ) #>  #> Call: #> lm(formula = Cov_2S_MSD ~ Previous_infection + Vaccine_interval *  #>     Centre_code, data = .) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -681468 -176802  -69633   98854 1444423  #>  #> Coefficients: #>                                   Estimate Std. Error t value Pr(>|t|)     #> (Intercept)                         314364      33824   9.294  < 2e-16 *** #> Previous_infectionY                 120937      34477   3.508 0.000520 *** #> Vaccine_intervalSHORT              -145061      58443  -2.482 0.013603 *   #> Centre_code                           6937      13365   0.519 0.604099     #> Vaccine_intervalSHORT:Centre_code   157812      44140   3.575 0.000407 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 284800 on 303 degrees of freedom #> Multiple R-squared:  0.1216, Adjusted R-squared:   0.11  #> F-statistic: 10.49 on 4 and 303 DF,  p-value: 5.699e-08  ## easier to read, and plot from broom::tidy ## tidy(lm_res_interactions ) #> # A tibble: 5 × 5 #>   term                              estimate std.error statistic  p.value #>   <chr>                                <dbl>     <dbl>     <dbl>    <dbl> #> 1 (Intercept)                        314364.    33824.     9.29  3.02e-18 #> 2 Previous_infectionY                120937.    34477.     3.51  5.20e- 4 #> 3 Vaccine_intervalSHORT             -145061.    58443.    -2.48  1.36e- 2 #> 4 Centre_code                          6937.    13365.     0.519 6.04e- 1 #> 5 Vaccine_intervalSHORT:Centre_code  157812.    44140.     3.58  4.07e- 4  tidy(lm_res_interactions ) %>%   filter(term != \"(Intercept)\") %>%   ggplot(aes(x=estimate, y = -log10(p.value),          label = term)) +   geom_point() +   geom_text_repel() +   geom_hline(yintercept = -log10(0.05),               linetype = 3) anova(lm_res,        lm_res_interactions) #> Analysis of Variance Table #>  #> Model 1: Cov_2S_MSD ~ Vaccine_interval + Previous_infection + Centre_code #> Model 2: Cov_2S_MSD ~ Previous_infection + Vaccine_interval * Centre_code #>   Res.Df        RSS Df  Sum of Sq      F   Pr(>F)     #> 1    304 2.5611e+13                                   #> 2    303 2.4575e+13  1 1.0367e+12 12.783 0.000407 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 bind_rows(   # this is broom::glance() : #   glance(lm_res),   glance(lm_res_interactions) ) #> # A tibble: 2 × 12 #>   r.squared adj.r.squared   sigma statistic     p.value    df logLik   AIC   BIC #>       <dbl>         <dbl>   <dbl>     <dbl>       <dbl> <dbl>  <dbl> <dbl> <dbl> #> 1    0.0846        0.0755 290255.      9.36     6.16e-6     3 -4309. 8628. 8647. #> 2    0.122         0.110  284788.     10.5      5.70e-8     4 -4303. 8618. 8640. #> # ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>"},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/stats.html","id":"time-to-event-analysis","dir":"Articles","previous_headings":"","what":"Time to event analysis","title":"Chronogram statistics","text":"Hypothesis Within centre 1, dose 2 (“event”) occurs earlier individuals without prior infection. Start date dose 1 Event date dose 2 Censoring none (PITCH doses) Filtering centre 0, centre approximately equal split long:short interval. NOTE Changes made de-identified public dataset (DOI: 10.17632/fyp26zjgmj.1). public data reports dates MM/YYYY. build chronogram assigned randomly 1-28 DD DD/MM/YYYY dose 1, used available intervals days place remaining data date time. illustration purposes, need plausible DD/MM/YYYY dates - real. public dataset used example (assays included). meaningful time event analysis, real rather plausible dates needed. vignette shows example code, results insecure.","code":"data(\"pitch_chronogram\")  ## filter, de-duplicate ## t_to_event_data <- pitch_chronogram %>%   filter(Centre_code == 0) %>%   group_by(ID) %>%   slice_head() %>%   ungroup() %>%   ## all receive dose 2 ##   mutate(outcome = 1) %>%   mutate(dose_2_crude =              as.numeric(            dose_2_date - (dose_1_date)))  fit<- survfit(Surv(time = dose_2_crude,                    # time2 = dose_2_d,                    outcome) ~ Previous_infection, data = t_to_event_data)  ggsurvplot(fit,                       conf.int = TRUE,                       data = t_to_event_data,                       fun = \"event\",                       risk.table = TRUE,                       pval = TRUE,                       pval.coord = c(0.1, 0.9),                       pval.method = TRUE,                       pval.method.coord = c(0.1, 1))"},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/stats.html","id":"left-censored-time-to-event-analysis","dir":"Articles","previous_headings":"Time to event analysis","what":"Left-censored time to event analysis","title":"Chronogram statistics","text":"use left censoring, given individual considered -risk event (dose 2) first dose. real world, left censoring useful risk exposure might change calendar time. example dataset, highlights use plausible (DD randomly assigned MM-YYYY), rather real dates.  Note: now x axis runs 5 months covers ~2m period earliest latest first dose. numbers risk can increase time points individuals become eligible (, receiving dose 1). difference strata now much less apparent. likely due plausible rather real dates example dataset.","code":"data(\"pitch_chronogram\")  ## filter, de-duplicate ## t2_to_event_data <- pitch_chronogram %>%   filter(Centre_code == 0) %>%   group_by(ID) %>%   slice_head() %>%   ungroup() %>%   ## all receive dose 2 ##   mutate(outcome = 1) %>%   ## use the earliest date of dose 1 to anchor other times ##   mutate(dose_1_d =              as.numeric(            dose_1_date - min(dose_1_date))) %>%   mutate(dose_2_d =              as.numeric(            dose_2_date - min(dose_1_date)))   fit2 <- survfit(Surv(time = dose_1_d,                     time2 = dose_2_d,                    outcome) ~ Previous_infection, data = t2_to_event_data)    ggsurvplot(   fit2,   conf.int = TRUE,   data = t2_to_event_data,   fun = \"event\",   risk.table = TRUE,   ## calcuate Cox PH P value ##   pval =      round(     summary(     coxph(Surv(time = dose_1_d,                time2 = dose_2_d,                outcome) ~ Previous_infection,            data = t2_to_event_data)     )$coefficients[,\"Pr(>|z|)\"],     digits = 3),   pval.coord = c(0.1, 0.9)   # pval.method.coord = c(0.1, 1) )"},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/stats.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Chronogram statistics","text":"vignette shows code map data chronogram variety different statistical tests.","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/articles/stats.html","id":"sessioninfo","dir":"Articles","previous_headings":"","what":"SessionInfo","title":"Chronogram statistics","text":"","code":"sessionInfo() #> R version 4.4.1 (2024-06-14) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] chronogram_1.0.0 survminer_0.4.9  ggpubr_0.6.0     survival_3.6-4   #> [5] ggrepel_0.9.5    ggplot2_3.5.1    broom_1.0.6      rstatix_0.7.2    #> [9] dplyr_1.1.4      #>  #> loaded via a namespace (and not attached): #>  [1] gtable_0.3.5      xfun_0.46         bslib_0.8.0       lattice_0.22-6    #>  [5] vctrs_0.6.5       tools_4.4.1       generics_0.1.3    tibble_3.2.1      #>  [9] fansi_1.0.6       highr_0.11        pkgconfig_2.0.3   Matrix_1.7-0      #> [13] data.table_1.15.4 desc_1.4.3        lifecycle_1.0.4   stringr_1.5.1     #> [17] compiler_4.4.1    farver_2.1.2      textshaping_0.4.0 munsell_0.5.1     #> [21] carData_3.0-5     htmltools_0.5.8.1 sass_0.4.9        yaml_2.3.10       #> [25] pillar_1.9.0      pkgdown_2.1.0     car_3.1-2         jquerylib_0.1.4   #> [29] tidyr_1.3.1       cachem_1.1.0      abind_1.4-5       km.ci_0.5-6       #> [33] commonmark_1.9.1  tidyselect_1.2.1  digest_0.6.36     stringi_1.8.4     #> [37] purrr_1.0.2       labeling_0.4.3    splines_4.4.1     fastmap_1.2.0     #> [41] grid_4.4.1        colorspace_2.1-1  cli_3.6.3         magrittr_2.0.3    #> [45] utf8_1.2.4        withr_3.0.1       scales_1.3.0      backports_1.5.0   #> [49] rmarkdown_2.27    ggtext_0.1.2      gridExtra_2.3     ggsignif_0.6.4    #> [53] ragg_1.3.2        zoo_1.8-12        evaluate_0.24.0   knitr_1.48        #> [57] KMsurv_0.1-5      markdown_1.13     survMisc_0.5.6    rlang_1.1.4       #> [61] gridtext_0.1.5    Rcpp_1.0.13       xtable_1.8-4      glue_1.7.0        #> [65] xml2_1.3.6        jsonlite_1.8.8    R6_2.5.1          systemfonts_1.1.0 #> [69] fs_1.6.4"},{"path":"https://franciscrickinstitute.github.io/chronogram/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Edward Carr. Author, maintainer. David Greenwood. Author. Marianne Shawe-Taylor. Author.","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Carr E, Greenwood D, Shawe-Taylor M (2024). chronogram: Chronogram: Adaptive Data Casting Pandemic Data Analysis. R package version 1.0.0, https://franciscrickinstitute.github.io/chronogram/.","code":"@Manual{,   title = {chronogram: Chronogram: Adaptive Data Casting for Pandemic Data Analysis},   author = {Edward Carr and David Greenwood and Marianne Shawe-Taylor},   year = {2024},   note = {R package version 1.0.0},   url = {https://franciscrickinstitute.github.io/chronogram/}, }"},{"path":"https://franciscrickinstitute.github.io/chronogram/index.html","id":"chronogram","dir":"","previous_headings":"","what":"Chronogram: Adaptive Data Casting for Pandemic Data Analysis","title":"Chronogram: Adaptive Data Casting for Pandemic Data Analysis","text":"goal chronogram “cast” annotate metadata, laboratory clinical data tidy-like data structure. bridges LIMS / database style data warehouse data ready interrogation test biological hypotheses. chronogram designed SARS-CoV-2 pandemic (2019-). However, pathogen, vaccine symptoms agnostic.","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Chronogram: Adaptive Data Casting for Pandemic Data Analysis","text":"Install current version GitHub: installed packages github , setup GitHub account interact R.","code":"# install.packages(\"devtools\") devtools::install_github(\"FrancisCrickInstitute/chronogram\")"},{"path":"https://franciscrickinstitute.github.io/chronogram/index.html","id":"why-should-i-use-chronogram","dir":"","previous_headings":"","what":"Why should I use chronogram?","title":"Chronogram: Adaptive Data Casting for Pandemic Data Analysis","text":"aggregate study data regularly 🕓, repetitively 🔁. Perhaps study rolling recruitment, ongoing data generation incremental analysis. Outsource effort chronogram. reproducibly aggregate data within across several studies & users 👩‍💻👨‍💻. Stop troubleshooting joins hand. provide versatile data shape poised new follow-analyses without needing re-aggregation 🛫. shouldn’t use chronogram? study completed. assembled clean, de-duplicated fully annotated data object. finished data analysis. Congratulations! 🥳 Don’t reinvent wheel .","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/index.html","id":"how-do-i-use-chronogram","dir":"","previous_headings":"","what":"How do I use chronogram?","title":"Chronogram: Adaptive Data Casting for Pandemic Data Analysis","text":"chronogram workflow can divided assembly, annotation finally, filtering, windowing selecting data specific analysis.","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/index.html","id":"chronogram-assembly","dir":"","previous_headings":"How do I use chronogram?","what":"chronogram assembly","title":"Chronogram: Adaptive Data Casting for Pandemic Data Analysis","text":"cg_assemble() combines cleaned metadata, experimental data, range calendar dates chronogram. cg_add_experiment() allows adding experiments details: assembly vignette step--step guide, quickstart. SQL vignette explains chronogram assembly SQL database. introduction chronogram class","code":""},{"path":[]},{"path":"https://franciscrickinstitute.github.io/chronogram/index.html","id":"annotate-vaccines","dir":"","previous_headings":"How do I use chronogram? > chronogram annotation","what":"Annotate vaccines","title":"Chronogram: Adaptive Data Casting for Pandemic Data Analysis","text":"Label day participant number doses received, including support lag period reciept dose immunological priming effect. Annotate vaccines .","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/index.html","id":"annotate-infection-episodes","dir":"","previous_headings":"How do I use chronogram? > chronogram annotation","what":"Annotate infection episodes","title":"Chronogram: Adaptive Data Casting for Pandemic Data Analysis","text":"Symptoms, point--care tests, laboratory tests infection rarely occur exactly study day. chronogram finds, fills annotates tests symptoms episodes infection. Annotate episodes .","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/index.html","id":"annnotate-exposures","dir":"","previous_headings":"How do I use chronogram? > chronogram annotation","what":"Annnotate exposures","title":"Chronogram: Adaptive Data Casting for Pandemic Data Analysis","text":"annotating vaccines infection episodes, can combined annotate exposures - encounters antigen either infection vaccination.","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/index.html","id":"chronogram-filtering-window-and-select","dir":"","previous_headings":"How do I use chronogram?","what":"chronogram filtering, window and select","title":"Chronogram: Adaptive Data Casting for Pandemic Data Analysis","text":"dplyr::filter() filter chronogram based metadata (eg vaccine formulation) cg_window_by_metadata() window around event 14 days participant’s vaccine cg_window_by_episode() picks window around infection episodes See functions work brief primer demonstrating pass chronogram variety statistical tests.","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/built_smallstudy.html","id":null,"dir":"Reference","previous_headings":"","what":"Small study: pre-built chronogram — built_smallstudy","title":"Small study: pre-built chronogram — built_smallstudy","text":"fictional covid-19 vaccine study 3 individuals. Provided vector participant IDs, tibble metadata, tibble experimental data.","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/built_smallstudy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Small study: pre-built chronogram — built_smallstudy","text":"","code":"built_smallstudy"},{"path":[]},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/built_smallstudy.html","id":"built-smallstudy","dir":"Reference","previous_headings":"","what":"built_smallstudy","title":"Small study: pre-built chronogram — built_smallstudy","text":"list 2 components small_study_chronogram_skeleton Example chronogram_skeleton small_study_chronogram Example chronogram","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/built_smallstudy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Small study: pre-built chronogram — built_smallstudy","text":"data identical smallstudy. cg_assemble() run shorten examples.","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/built_smallstudy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Small study: pre-built chronogram — built_smallstudy","text":"","code":"data(\"built_smallstudy\")"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_add_experiment.html","id":null,"dir":"Reference","previous_headings":"","what":"Add experimental data to a chronogram — cg_add_experiment","title":"Add experimental data to a chronogram — cg_add_experiment","text":"Add experimental data chronogram","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_add_experiment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add experimental data to a chronogram — cg_add_experiment","text":"","code":"cg_add_experiment(cg, experiment)"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_add_experiment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add experimental data to a chronogram — cg_add_experiment","text":"cg chronogram object (class cg_tbl) experiment tibble::tibble() containing experimental data. dates IDs columns cg must present experiment.","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_add_experiment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add experimental data to a chronogram — cg_add_experiment","text":"chronogram","code":""},{"path":[]},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_add_experiment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add experimental data to a chronogram — cg_add_experiment","text":"","code":"## Example 1: A small study ##------------------------------------- data(built_smallstudy)  ## Setup ## cg <- built_smallstudy$chronogram  infections_to_add <- tibble::tribble(   ~calendar_date, ~elig_study_id, ~LFT, ~PCR, ~symptoms,   \"01102020\", \"1\", \"pos\", NA, NA,   \"11102020\", \"1\", \"pos\", NA, \"severe\" ) ## Make calendar_date a date ## infections_to_add$calendar_date <- lubridate::dmy(   infections_to_add$calendar_date ) ## Add this new experiment data ## cg_added <- cg_add_experiment(cg, infections_to_add)  ## Example 2: Incorrect column names ##----------------------------  ## Setup as for Example 1 ## infections_to_add_renamed <- infections_to_add %>% dplyr::rename(ID = elig_study_id)  ## this fails ## try( cg_added_2 <- cg_add_experiment(cg,  infections_to_add_renamed) ) #> Error in check_experiment(x = experiment, cg = cg) :  #>   Invalid experiment: provided ids_column_name is not present  ##------------------------------------------------------------------"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_add_treatment.html","id":null,"dir":"Reference","previous_headings":"","what":"Add treatment data to a chronogram — cg_add_treatment","title":"Add treatment data to a chronogram — cg_add_treatment","text":"Add treatment data chronogram","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_add_treatment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add treatment data to a chronogram — cg_add_treatment","text":"","code":"cg_add_treatment(cg, treatment)"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_add_treatment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add treatment data to a chronogram — cg_add_treatment","text":"cg chronogram object (class cg_tbl) treatment tibble::tibble() containing treatment data. dates IDs columns cg must present experiment.","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_add_treatment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add treatment data to a chronogram — cg_add_treatment","text":"chronogram","code":""},{"path":[]},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_add_treatment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add treatment data to a chronogram — cg_add_treatment","text":"","code":"## Example 1: A small study ##------------------------------------- library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union data(built_smallstudy)  ## Setup ## cg <- built_smallstudy$chronogram  # Create a tibble of exemplar treatment data # Here, we have treated ID=1 with B cell depletion # therapy, rituximab (RTX).  treatments_to_add <-   tibble::tribble(     ~elig_study_id, ~calendar_date, ~treatment,     1, \"01/02/2021\", \"RTX\"   )    ## Make calendar_date a date class ## treatments_to_add <- treatments_to_add %>%   mutate(across(contains(\"date\"), ~ lubridate::dmy(.x)))    ## Add this new treatment data ## cg_added <- cg_add_experiment(cg, treatments_to_add)  ## Example 2: Incorrect column names ##----------------------------  ## Setup as for Example 1 ## treatments_to_add_renamed <- treatments_to_add %>% dplyr::rename(ID = elig_study_id)  ## this fails ## try( cg_added_2 <- cg_add_experiment(cg,  treatments_to_add_renamed) ) #> Error in check_experiment(x = experiment, cg = cg) :  #>   Invalid experiment: provided ids_column_name is not present  ##------------------------------------------------------------------"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_annotate_antigenic_history.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate and assign flags based on infection history — cg_annotate_antigenic_history","title":"Calculate and assign flags based on infection history — cg_annotate_antigenic_history","text":"Calculate assign flags based infection history","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_annotate_antigenic_history.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate and assign flags based on infection history — cg_annotate_antigenic_history","text":"","code":"cg_annotate_antigenic_history(   cg,   episode_number = episode_number,   dose_number = dose_number,   episode_variant_summarised = episode_variant_summarised,   ag_col = antigenic_history )"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_annotate_antigenic_history.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate and assign flags based on infection history — cg_annotate_antigenic_history","text":"cg chronogram episode_number character vector identify episode_number column. Default \"episode_number\". dose_number character vector identify column containing number doses received day. Default \"dose_number\". episode_variant_summarised character vector identify column summarising variant call. Default \"episode_variant_summarised\". ag_col column infection flag","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_annotate_antigenic_history.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate and assign flags based on infection history — cg_annotate_antigenic_history","text":"chronogram","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_annotate_antigenic_history.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate and assign flags based on infection history — cg_annotate_antigenic_history","text":"","code":"library(dplyr)  data(\"built_smallstudy\") cg <- built_smallstudy$chronogram  ## add infections to chronogram ## cg <- cg_add_experiment(   cg,   built_smallstudy$infections_to_add )  ## annotate infections ##  cg <- cg_annotate_episodes_find(    cg,    infection_cols = c(\"LFT\", \"PCR\", \"symptoms\"),    infection_present = c(\"pos\", \"Post\", \"^severe\") ) #> Parsed: infection_cols and infection_present #>            #> Searching in the [[column]], for the \"text\":  #>  #> Loading required namespace: stringr #> stringr::str_detect(.data[[\"LFT\"]], \"pos\") ~ \"yes\" #>  #> stringr::str_detect(.data[[\"PCR\"]], \"Post\") ~ \"yes\" #>  #> stringr::str_detect(.data[[\"symptoms\"]], \"^severe\") ~ \"yes\" #>  #>  #> ...detecting will be exact. #>           Capitals, spelling etc must be precise #>  #> Joining with `by = join_by(calendar_date, elig_study_id)`  ## annotate vaccines ##  cg <- cg %>% cg_annotate_vaccines_count(  ## the prefix to the dose columns: ##  dose = dose,  ## the output column name: ##  dose_counter = dose_number,  ## the prefix to the date columns: ##  vaccine_date_stem = date_dose,  ## use 14d to 'star' after a dose ##  intermediate_days = 14) #> Using stem: date_dose #> Found vaccine dates #> date_dose_1 #>  #> date_dose_2  ## annotate exposures ## cg <- cg %>% cg_annotate_exposures_count(  episode_number = episode_number,  dose_number = dose_number,  ## we have not considered episodes of seroconversion  N_seroconversion_episode_number = NULL  )   ## assign variants ## cg <- cg %>% mutate( episode_variant = case_when(     # \"is an episode\" & \"PCR positive\" -> Delta #     (!is.na(episode_number)) & PCR == \"Pos\" ~ \"Delta\",     # \"is an episode\" & \"PCR unavailable\" -> Anc/Delta #     (!is.na(episode_number)) & PCR == \"not tested\" ~ \"Anc/Alpha\" ) ) ## ^ this gives a variant call on a SINGLE row of each episode  ## fill the variant call ## cg <- cg %>% cg_annotate_episodes_fill(  col_to_fill = episode_variant,  col_to_return = episode_variant_filled,  .direction = \"updown\",  episode_numbers_col = episode_number  ) #> Joining with `by = join_by(elig_study_id, episode_number)`    cg <- cg %>%   mutate(  episode_variant_summarised =    episode_variant_filled  ) %>%  cg_annotate_antigenic_history(      episode_number = episode_number,          dose_number = dose_number,          episode_variant_summarised = episode_variant_summarised,              ag_col = antigenic_history              )   ## and finally:  summary(factor(cg$antigenic_history)) #>          D0_Anc/Alpha D2_Anc/Alpha,D2_Delta       D2_not_infected  #>                   649                   649                   649"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_annotate_episodes_count.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate and assign flags based on infection history — cg_annotate_episodes_count","title":"Calculate and assign flags based on infection history — cg_annotate_episodes_count","text":"Count total number infections individual end study (data freeze), make available fresh column. cg_annotate_episodes_count() run cg_annotate_episodes_find(). cumulative number infections use cg_annotate_episodes_find() .","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_annotate_episodes_count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate and assign flags based on infection history — cg_annotate_episodes_count","text":"","code":"cg_annotate_episodes_count(   cg,   episode_number = episode_number,   count_col = count_col )"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_annotate_episodes_count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate and assign flags based on infection history — cg_annotate_episodes_count","text":"cg chronogram episode_number character vector use label ID column. Default \"episode_number\". count_col column infection count","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_annotate_episodes_count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate and assign flags based on infection history — cg_annotate_episodes_count","text":"subsetted chronogram","code":""},{"path":[]},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_annotate_episodes_count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate and assign flags based on infection history — cg_annotate_episodes_count","text":"","code":"library(dplyr)  data(\"built_smallstudy\") cg <- built_smallstudy$chronogram  ## add infections to chronogram cg <- cg_add_experiment(   cg,   built_smallstudy$infections_to_add )  ## annotate infections  cg <- cg_annotate_episodes_find(    cg,    infection_cols = c(\"LFT\", \"PCR\", \"symptoms\"),    infection_present = c(\"pos\", \"Post\", \"^severe\") ) #> Parsed: infection_cols and infection_present #>            #> Searching in the [[column]], for the \"text\":  #>  #> stringr::str_detect(.data[[\"LFT\"]], \"pos\") ~ \"yes\" #>  #> stringr::str_detect(.data[[\"PCR\"]], \"Post\") ~ \"yes\" #>  #> stringr::str_detect(.data[[\"symptoms\"]], \"^severe\") ~ \"yes\" #>  #>  #> ...detecting will be exact. #>           Capitals, spelling etc must be precise #>  #> Joining with `by = join_by(calendar_date, elig_study_id)`  ## count infections cg <- cg_annotate_episodes_count( cg)  ## pull number of infections each individual has during study ## cg %>%    dplyr::group_by(elig_study_id) %>%    dplyr::slice_head() %>%    dplyr::select(elig_study_id, count_col) #> # A tibble: 3 × 2 #> # Groups:   elig_study_id [3] #>   elig_study_id count_col #>   <fct>             <dbl> #> 1 1                     1 #> 2 2                     2 #> 3 3                     0"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_annotate_episodes_fill.html","id":null,"dir":"Reference","previous_headings":"","what":"Fill experimental, treatment or symptom information within an infection episode — cg_annotate_episodes_fill","title":"Fill experimental, treatment or symptom information within an infection episode — cg_annotate_episodes_fill","text":"Fill experimental, treatment symptom information within infection episode","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_annotate_episodes_fill.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fill experimental, treatment or symptom information within an infection episode — cg_annotate_episodes_fill","text":"","code":"cg_annotate_episodes_fill(   cg,   col_to_fill,   col_to_return,   .direction = \"down\",   episode_numbers_col = episode_number )"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_annotate_episodes_fill.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fill experimental, treatment or symptom information within an infection episode — cg_annotate_episodes_fill","text":"cg chronogram col_to_fill name column fill within episode col_to_return name returned, filled column .direction See tidyr::fill(), provide quoted. episode_numbers_col column name use episode numbers. Default episode_number, unquoted.","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_annotate_episodes_fill.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fill experimental, treatment or symptom information within an infection episode — cg_annotate_episodes_fill","text":"chronogram, episode data filled within episode.","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_annotate_episodes_fill.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fill experimental, treatment or symptom information within an infection episode — cg_annotate_episodes_fill","text":"","code":"library(dplyr)  data(\"built_smallstudy\") cg <- built_smallstudy$chronogram  ## add infections to chronogram ## cg <- cg_add_experiment(   cg,   built_smallstudy$infections_to_add )  ## annotate infections ##  cg <- cg_annotate_episodes_find(    cg,    infection_cols = c(\"LFT\", \"PCR\", \"symptoms\"),    infection_present = c(\"pos\", \"Post\", \"^severe\") ) #> Parsed: infection_cols and infection_present #>            #> Searching in the [[column]], for the \"text\":  #>  #> stringr::str_detect(.data[[\"LFT\"]], \"pos\") ~ \"yes\" #>  #> stringr::str_detect(.data[[\"PCR\"]], \"Post\") ~ \"yes\" #>  #> stringr::str_detect(.data[[\"symptoms\"]], \"^severe\") ~ \"yes\" #>  #>  #> ...detecting will be exact. #>           Capitals, spelling etc must be precise #>  #> Joining with `by = join_by(calendar_date, elig_study_id)`  ## assign variants ## cg <- cg %>% mutate( episode_variant = case_when(     # \"is an episode\" & \"PCR positive\" -> Delta #     (!is.na(episode_number)) & PCR == \"Pos\" ~ \"Delta\",     # \"is an episode\" & \"PCR unavailable\" -> Anc/Delta #     (!is.na(episode_number)) & PCR == \"not tested\" ~ \"Anc/Alpha\" ) ) ## ^ this gives a variant call on a SINGLE row of each episode  ## fill the variant call ## cg <- cg %>% cg_annotate_episodes_fill(  col_to_fill = episode_variant,  col_to_return = episode_variant_filled,  .direction = \"updown\",  episode_numbers_col = episode_number  ) #> Joining with `by = join_by(elig_study_id, episode_number)`"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_annotate_episodes_find.html","id":null,"dir":"Reference","previous_headings":"","what":"Find infections per individual — cg_annotate_episodes_find","title":"Find infections per individual — cg_annotate_episodes_find","text":"Find infections per individual","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_annotate_episodes_find.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find infections per individual — cg_annotate_episodes_find","text":"","code":"cg_annotate_episodes_find(   cg,   infection_cols,   infection_present,   episode_days = 14,   episode_numbers_col = episode_number,   episode_start_col = episode_start,   episode_end_col = episode_end )"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_annotate_episodes_find.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find infections per individual — cg_annotate_episodes_find","text":"cg chronogram infection_cols vector column names contain information regarding infection status, symptoms, LFT results, PCR results, sequencing results. infection_present Strings used infection_cols indicate presence infection. episode_days number days scan forwards backwards time consider events single episode. example, symptom onset 10d positive PCR test single episode? default 14d. episode_numbers_col column name use episode numbers. Default episode_number (unquoted). episode_start_col, episode_end_col column names store episode start end dates (defaults: episode_start episode_end, unquoted).","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_annotate_episodes_find.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find infections per individual — cg_annotate_episodes_find","text":"x chronogram, episode numbers annotated","code":""},{"path":[]},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_annotate_episodes_find.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find infections per individual — cg_annotate_episodes_find","text":"","code":"## Example 1: A small study ##------------------------------------- data(built_smallstudy) cg_small <- built_smallstudy$chronogram infections_to_add <- built_smallstudy$infections_to_add  ## add infection data to to chronogram ## cg_small <- cg_add_experiment(cg_small, infections_to_add)  ## now infection finding ## cg_small_inf <- cg_annotate_episodes_find(cg_small,   infection_cols = c(\"LFT\", \"PCR\", \"symptoms\"),   infection_present = c(\"pos\", \"Post\", \"^severe\") ) #> Parsed: infection_cols and infection_present #>            #> Searching in the [[column]], for the \"text\":  #>  #> stringr::str_detect(.data[[\"LFT\"]], \"pos\") ~ \"yes\" #>  #> stringr::str_detect(.data[[\"PCR\"]], \"Post\") ~ \"yes\" #>  #> stringr::str_detect(.data[[\"symptoms\"]], \"^severe\") ~ \"yes\" #>  #>  #> ...detecting will be exact. #>           Capitals, spelling etc must be precise #>  #> Joining with `by = join_by(calendar_date, elig_study_id)`  summary(cg_small_inf$episode_number) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>   1.000   1.000   1.000   1.077   1.000   2.000    1934   ## exact text matching ##------------------------------------------ test2 <- cg_annotate_episodes_find(cg_small_inf,   infection_cols = c(\"LFT\", \"PCR\", \"symptoms\"),   infection_present = c(\"Pos\", \"Post\", \"^mild\") ) #> Parsed: infection_cols and infection_present #>            #> Searching in the [[column]], for the \"text\":  #>  #> stringr::str_detect(.data[[\"LFT\"]], \"Pos\") ~ \"yes\" #>  #> stringr::str_detect(.data[[\"PCR\"]], \"Post\") ~ \"yes\" #>  #> stringr::str_detect(.data[[\"symptoms\"]], \"^mild\") ~ \"yes\" #>  #>  #> ...detecting will be exact. #>           Capitals, spelling etc must be precise #>  #> Joining with `by = join_by(calendar_date, elig_study_id, episode_number, #> episode_start, episode_end)`  summary(test2$episode_number) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>   1.000   1.000   1.000   1.077   1.000   2.000    1934   ## empty strings will error (as they otherwise match everything) ## test3a <-  try( cg_annotate_episodes_find(cg_small_inf,   infection_cols = c(\"LFT\", \"PCR\", \"symptoms\"),   infection_present = c(\"pos\", \"Post\", \"\") ) ) #> Parsed: infection_cols and infection_present #>            #> Searching in the [[column]], for the \"text\":  #>  #> stringr::str_detect(.data[[\"LFT\"]], \"pos\") ~ \"yes\" #>  #> stringr::str_detect(.data[[\"PCR\"]], \"Post\") ~ \"yes\" #>  #> stringr::str_detect(.data[[\"symptoms\"]], \"\") ~ \"yes\" #> Error in cg_annotate_episodes_find(cg_small_inf, infection_cols = c(\"LFT\",  :  #>   infection_present seems to have one more empty condition(s) ## a 'random' string will not error ##----------------------------- test3b <- try( cg_annotate_episodes_find(cg_small_inf,   infection_cols = c(\"LFT\", \"PCR\", \"symptoms\"),   infection_present = c(\"pos\", \"Post\", \"a\") ) ) #> Parsed: infection_cols and infection_present #>            #> Searching in the [[column]], for the \"text\":  #>  #> stringr::str_detect(.data[[\"LFT\"]], \"pos\") ~ \"yes\" #>  #> stringr::str_detect(.data[[\"PCR\"]], \"Post\") ~ \"yes\" #>  #> stringr::str_detect(.data[[\"symptoms\"]], \"a\") ~ \"yes\" #>  #>  #> ...detecting will be exact. #>           Capitals, spelling etc must be precise #>  #> Joining with `by = join_by(calendar_date, elig_study_id, episode_number, #> episode_start, episode_end)`"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_annotate_episodes_find_seroconversion.html","id":null,"dir":"Reference","previous_headings":"","what":"Find seroconversion episodes per individual — cg_annotate_episodes_find_seroconversion","title":"Find seroconversion episodes per individual — cg_annotate_episodes_find_seroconversion","text":"cg_annotate_episodes_find_seroconversion() finds episodes based seroconversion. , use N (SARS-CoV-2 nucleocapsid). covid vaccines contain Spike , seroconversion N means exposure SARS-CoV-2. symptoms, lateral flow tests SARS-CoV-2 PCR positivity, experimental data matches exposure within days (hours). Seroconversion occurs anytime blood samples. Chronogram therefore provides separate annotation functions cg_annotate_episodes_find() cg_annotate_episodes_find_seroconversion(), options combine two results.","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_annotate_episodes_find_seroconversion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find seroconversion episodes per individual — cg_annotate_episodes_find_seroconversion","text":"","code":"cg_annotate_episodes_find_seroconversion(   cg,   serum_N_titre = NULL,   serum_N_cutoff = 1,   N_seroconversion_episode = \"N_seroconversion_episode\",   episode_number_append = \"number\",   episode_start_col_append = \"start\",   episode_end_col_append = \"end\" )"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_annotate_episodes_find_seroconversion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find seroconversion episodes per individual — cg_annotate_episodes_find_seroconversion","text":"cg chronogram serum_N_titre column containing seroconversion information. serum_N_cutoff numerical threshold seropositivity. Greater equal threshold taken positive. Default 1 - check assay documentation. N_seroconversion_episode column name resulting episode flag. Default \"N_seroconversion_episode\" episode_number_append appended N_seroconversion_episode provide column name episode number. Default \"number\" episode_start_col_append appended N_seroconversion_episode provide column name episode start date. Default \"start\" episode_end_col_append appended N_seroconversion_episode provide column name episode end date. Default \"_end\"","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_annotate_episodes_find_seroconversion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find seroconversion episodes per individual — cg_annotate_episodes_find_seroconversion","text":"chronogram, episode numbers annotated","code":""},{"path":[]},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_annotate_episodes_find_seroconversion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find seroconversion episodes per individual — cg_annotate_episodes_find_seroconversion","text":"","code":"##Example 1: Small study##----------------------------------------- library(dplyr) # for dplyr::filter()  data(\"built_smallstudy\")  cg <- built_smallstudy$chronogram cg <- cg_annotate_episodes_find_seroconversion(cg,   serum_N_titre =     \"serum_Ab_N\" )  ## ID==1 seroconverts to N ## ## Their first N seroconversion has dates associated ## ## Their later N positive tests are flagged without dates ## cg %>%  filter(N_seroconversion_episode_number == 1) %>%  cg_select(contains(\"episode\")) #> # A tibble:     4 × 6 #> # A chronogram: try summary() #>   calendar_date elig_study_id N_seroconversion_episode N_seroconversion_episod…¹ #> * <date>        <fct>         <chr>                                        <dbl> #> 1 2021-01-05    1             yes                                              1 #> 2 2021-01-15    1             NA                                               1 #> 3 2021-02-03    1             NA                                               1 #> 4 2021-02-15    1             NA                                               1 #> # ℹ abbreviated name: ¹​N_seroconversion_episode_number #> # ℹ 2 more variables: N_seroconversion_episode_start <date>, #> #   N_seroconversion_episode_end <date> #> # ★ Dates: calendar_date      ★ IDs: elig_study_id #> # ★ metadata:  ##-------------------------------------------------------------------"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_annotate_exposures_count.html","id":null,"dir":"Reference","previous_headings":"","what":"Cumulative counting seroconversion episodes per individual — cg_annotate_exposures_count","title":"Cumulative counting seroconversion episodes per individual — cg_annotate_exposures_count","text":"cg_annotate_exposures_count returns cumulative count exposures. exposures can vaccines, infection episodes, seroconversion episodes (seroconversion episode biologically infection - difference two concomittant symptoms, diagnostic testing).","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_annotate_exposures_count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cumulative counting seroconversion episodes per individual — cg_annotate_exposures_count","text":"","code":"cg_annotate_exposures_count(   cg,   episode_number = episode_number,   N_seroconversion_episode_number = N_seroconversion_episode_number,   dose_number = dose_number,   exposure_number = exposure_number )"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_annotate_exposures_count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cumulative counting seroconversion episodes per individual — cg_annotate_exposures_count","text":"cg chronogram episode_number column containing infection episode numbers. cg_annotate_episodes_find() Default episode_number. N_seroconversion_episode_number column name resulting episode flag. Generated cg_annotate_episodes_find_seroconversion(). Default \"N_seroconversion_episode_number\". dose_number column name cumulative doses. Generated cg_annotate_vaccines_count(). Default \"dose_number\". exposure_number column name return cumulative counter. Default \"exposure_number\".","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_annotate_exposures_count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cumulative counting seroconversion episodes per individual — cg_annotate_exposures_count","text":"chronogram, episode numbers annotated","code":""},{"path":[]},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_annotate_exposures_count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cumulative counting seroconversion episodes per individual — cg_annotate_exposures_count","text":"","code":"library(dplyr) library(ggplot2)  data(\"built_smallstudy\") cg <- built_smallstudy$chronogram  ## add infections to chronogram ## cg <- cg_add_experiment(   cg,   built_smallstudy$infections_to_add )  ## annotate infections ##  cg <- cg_annotate_episodes_find(    cg,    infection_cols = c(\"LFT\", \"PCR\", \"symptoms\"),    infection_present = c(\"pos\", \"Post\", \"^severe\") ) #> Parsed: infection_cols and infection_present #>            #> Searching in the [[column]], for the \"text\":  #>  #> stringr::str_detect(.data[[\"LFT\"]], \"pos\") ~ \"yes\" #>  #> stringr::str_detect(.data[[\"PCR\"]], \"Post\") ~ \"yes\" #>  #> stringr::str_detect(.data[[\"symptoms\"]], \"^severe\") ~ \"yes\" #>  #>  #> ...detecting will be exact. #>           Capitals, spelling etc must be precise #>  #> Joining with `by = join_by(calendar_date, elig_study_id)`  ## annotate vaccines ##  cg <- cg %>% cg_annotate_vaccines_count(  ## the prefix to the dose columns: ##  dose = dose,  ## the output column name: ##  dose_counter = dose_number,  ## the prefix to the date columns: ##  vaccine_date_stem = date_dose,  ## use 14d to 'star' after a dose ##  intermediate_days = 14) #> Using stem: date_dose #> Found vaccine dates #> date_dose_1 #>  #> date_dose_2  ## annotate exposures ## cg <- cg %>% cg_annotate_exposures_count(  episode_number = episode_number,  dose_number = dose_number,  ## we have not considered episodes of seroconversion  N_seroconversion_episode_number = NULL  )    ## Visualise  cg %>% ggplot(  aes(x=calendar_date,  y= exposure_number,   col = elig_study_id)) + geom_line()"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_annotate_vaccines_count.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate and assign flags based on vaccine history — cg_annotate_vaccines_count","title":"Calculate and assign flags based on vaccine history — cg_annotate_vaccines_count","text":"Calculate assign flags based vaccine history","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_annotate_vaccines_count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate and assign flags based on vaccine history — cg_annotate_vaccines_count","text":"","code":"cg_annotate_vaccines_count(   cg,   vaccine_date_stem = NULL,   dose = dose,   dose_counter = NULL,   intermediate_days = 14 )"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_annotate_vaccines_count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate and assign flags based on vaccine history — cg_annotate_vaccines_count","text":"cg chronogram vaccine_date_stem start vaccine date columns. Default NULL. Try \"date_dose\"; asssumes \"date_dose_1,2,3...\" dose character vector use label dose column. numerical dose, filled date dose (empty intervening days). Default \"dose\". dose_counter column return cumulative number doses. Default NULL. Try \"dose_number\" intermediate_days number days pad dose date return eg \"1star\" within intermediate days dose 1, numeric","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_annotate_vaccines_count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate and assign flags based on vaccine history — cg_annotate_vaccines_count","text":"annotated chronogram (class cg_tbl).","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_annotate_vaccines_count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate and assign flags based on vaccine history — cg_annotate_vaccines_count","text":"","code":"data(\"built_smallstudy\") cg <- built_smallstudy$chronogram  ## annotate vaccines ## cg <- cg_annotate_vaccines_count(cg,   dose = dose,   dose_counter = dose_number,   vaccine_date_stem = date_dose,   intermediate_days = 7 ) #> Using stem: date_dose #> Found vaccine dates #> date_dose_1 #>  #> date_dose_2"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_assemble.html","id":null,"dir":"Reference","previous_headings":"","what":"Assemble a chronogram — cg_assemble","title":"Assemble a chronogram — cg_assemble","text":"cg_assemble() assembles chronogram 4 pieces input data: start date end date metadata optional list experiment data. verbose messsaging option (default) provided help troubleshoot input. Extra experimental can added later cg_add_experiment(). fine grain troubleshooting, run chronogram_skeleton() chronogram() sequentially (called turn cg_assemble()). circumstances, cg_assemble() encouraged method.","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_assemble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assemble a chronogram — cg_assemble","text":"","code":"cg_assemble(   start_date,   end_date,   calendar_date_col,   metadata,   metadata_ids_col,   experiment_data_list = NULL,   verbose = TRUE )"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_assemble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assemble a chronogram — cg_assemble","text":"start_date start date, format recognised lubridate::dmy() end_date end date, format recognised lubridate::dmy() calendar_date_col user-defined column name dates (unquoted). metadata tibble containing metadata metadata_ids_col (unquoted) column name participant IDs metadata tibble. default provided. experiment_data_list list tibbles experiment data. See cg_add_experiment() details. Ignored provided. verbose Default TRUE. Show progress messages?","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_assemble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assemble a chronogram — cg_assemble","text":"chronogram (class cg_tbl)","code":""},{"path":[]},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_assemble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assemble a chronogram — cg_assemble","text":"","code":"## Example 1: A small study ##------------------------------------- data(smallstudy)  ## Setup ## start <- \"01012020\" end <- \"10102021\" meta <- smallstudy$small_study_metadata ## age, sex, vaccine dates ab <- smallstudy$small_study_Ab ## antibody response data  ## Assembly ## cg_small <- cg_assemble(  ## start and end date ## start_date = start, end_date = end,  ## metadata ## metadata = meta, metadata_ids_col = elig_study_id,  ## experiment data ## experiment_data_list = list(ab),  ## set the date column name ## calendar_date_col = calendar_date ) #> Checking input parameters... #> -- checking start date 01012020 #> -- checking end date 10102021 #> -- checking end date later than start date #> -- checking metadata #> -- checking experiment data list #> --- checking experiment data list slot 1 #> Input checks completed #> Chronogram assembling... #> -- chrongram_skeleton built #> -- chrongram built with metadata #> -- adding experiment data #> --- adding experiment data slot 1 cols... elig_study_id calendar_date serum_Ab_S ...  ## Example 2: now with 2 types of experimental data ##-------------  ## Setup as example 1, and second experimental dataset here: ## infections_to_add <- tibble::tribble(   ~calendar_date, ~elig_study_id, ~LFT, ~PCR, ~symptoms,   \"01102020\", \"1\", \"pos\", NA, NA,   \"11102020\", \"1\", \"pos\", NA, \"severe\" ) ## Make calendar_date a date ## infections_to_add$calendar_date <- lubridate::dmy(   infections_to_add$calendar_date )  cg <- cg_assemble(   start_date = \"01012020\",   end_date = \"10102021\",   metadata = smallstudy$small_study_metadata,   metadata_ids_col = elig_study_id,   calendar_date_col = calendar_date,   experiment_data_list = list(ab, infections_to_add) ) #> Checking input parameters... #> -- checking start date 01012020 #> -- checking end date 10102021 #> -- checking end date later than start date #> -- checking metadata #> -- checking experiment data list #> --- checking experiment data list slot 1 #> --- checking experiment data list slot 2 #> Input checks completed #> Chronogram assembling... #> -- chrongram_skeleton built #> -- chrongram built with metadata #> -- adding experiment data #> --- adding experiment data slot 1 cols... elig_study_id calendar_date serum_Ab_S ... #> --- adding experiment data slot 2 cols... calendar_date elig_study_id LFT ... ##------------------------------------------------------------------"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_load.html","id":null,"dir":"Reference","previous_headings":"","what":"Load a chronogram — cg_load","title":"Load a chronogram — cg_load","text":"Load memory chronogram previously written disk cg_save().","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_load.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load a chronogram — cg_load","text":"","code":"cg_load(file = NULL)"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_load.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load a chronogram — cg_load","text":"file quoted filename. Include extension.","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_load.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load a chronogram — cg_load","text":"re-loaded chronogram","code":""},{"path":[]},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_load.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load a chronogram — cg_load","text":"","code":"data(\"built_smallstudy\") cg_orig <- built_smallstudy$chronogram ff <- tempfile() cg_save(cg_orig, file = ff) #> Finding metadata columns ... #> Found:  #> Writing file ... /tmp/Rtmpn6sOtz/file1824568f8c80 cg_new <- cg_load(ff) #> Suggest save and load with the same package version: #>  Loading into : 1.0.0  #>  Saved with   : 1.0.0  #>  If version numbers are different: #>       re-generate chronogram, or update your library.  summary(cg_new == cg_orig) #>  calendar_date  elig_study_id    age            sex           dose_1        #>  Mode:logical   Mode:logical   Mode:logical   Mode:logical   Mode:logical   #>  TRUE:1947      TRUE:1947      TRUE:1947      TRUE:1947      TRUE:1947      #>                                                                             #>  date_dose_1     dose_2        date_dose_2    serum_Ab_S     serum_Ab_N     #>  Mode:logical   Mode:logical   Mode:logical   Mode:logical   Mode:logical   #>  TRUE:1947      TRUE:1947      TRUE:1947      TRUE:12        TRUE:12        #>                                               NA's:1935      NA's:1935      identical(cg_new, cg_orig) #> [1] TRUE"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"cg_plot — cg_plot","title":"cg_plot — cg_plot","text":"Create ggplot2 object, plotting user-defined y axis time. ggplot2 objects retain entirety provided dataset. allows later adjustments, adding extra geom_layers new information, applying facets. find data examine obj$data. save ggplot2 objects, source data ALSO saved. cg_plot() removes un-used data default (drop_vars=TRUE). writing study specific ggplot2, best practice select minimal columns calling ggplot().","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cg_plot — cg_plot","text":"","code":"cg_plot(   cg,   x = NULL,   y_values,   drop_vars = TRUE,   point_alpha = 0.4,   point_shape = 20,   link_obs = TRUE,   link_colour = \"grey\",   link_alpha = 0.4,   ... )"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cg_plot — cg_plot","text":"cg chronogram x column time use x axis. NULL, default chronogram's calendar date attribute. user may want derive use alternatives eg 'daysSinceDose2'. y_values column within chronogram containing data wish plot. drop_vars Default TRUE. See description. point_alpha alpha geom_point(). point_shape shape geom_point(). link_obs Default TRUE. Draw line link results individual? link_colour colour geom_line() link_alpha alpha geom_line() ... passed aes()","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"cg_plot — cg_plot","text":"","code":"library(ggplot2) library(patchwork)  data(\"built_smallstudy\") cg <- built_smallstudy$chronogram  p1 <- cg_plot_meta(cg,   visit = serum_Ab_S ) #> Function provided to illustrate chronogram -> #>           ggplot2 interface. #> Function assumes the #>           presence of {dose_1, date_dose_1, dose_2, date_dose_2} #>           columns. #>           Users are likely to want to write their own, #>           study-specific applications  p2 <- cg_plot(cg,   y_values = serum_Ab_S ) #> Function provided to illustrate chronogram -> #>           ggplot2 interface. #>           Users are likely to want to write their own, #>           study-specific applications  p2 / p1   (p2 + scale_y_log10()) / p1 #> Warning: log-10 transformation introduced infinite values. #> Warning: log-10 transformation introduced infinite values."},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_plot_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"cg_plot_meta — cg_plot_meta","title":"cg_plot_meta — cg_plot_meta","text":"Create ggplot2 object, plotting user-defined metadata time swimmer's plot. ggplot2 objects retain entirety provided dataset. allows later adjustments, adding extra geom_layers new information, applying facets. find data examine obj$data. save ggplot2 objects, source data ALSO saved. cg_plot_meta() removes un-used data default (drop_vars=TRUE). writing study specific ggplot2, best practice select minimal columns calling ggplot().","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_plot_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cg_plot_meta — cg_plot_meta","text":"","code":"cg_plot_meta(   cg,   x = NULL,   date_dose_1 = date_dose_1,   dose_1 = dose_1,   date_dose_2 = date_dose_2,   dose_2 = dose_2,   visit = visit,   drop_vars = TRUE,   fill = NULL )"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_plot_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cg_plot_meta — cg_plot_meta","text":"cg chronogram x column time use x axis. NULL, default chronogram's calendar date attribute. user may want derive use alternatives eg 'daysSinceDose2'. date_dose_1 column containing date dose. dose_1 column containing vaccine formulation. date_dose_2 column containing date dose. dose_2 column containing vaccine formulation. visit column within chronogram indicate study visit (.e. samples available; NA samples taken, !=NA samples available). small study example, serum_Ab_S fills brief. drop_vars Default TRUE. See description. fill column used determine fill","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_plot_meta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"cg_plot_meta — cg_plot_meta","text":"","code":"library(ggplot2) library(patchwork)  data(\"built_smallstudy\") cg <- built_smallstudy$chronogram  p1 <- cg_plot_meta(cg,   visit = serum_Ab_S ) #> Function provided to illustrate chronogram -> #>           ggplot2 interface. #> Function assumes the #>           presence of {dose_1, date_dose_1, dose_2, date_dose_2} #>           columns. #>           Users are likely to want to write their own, #>           study-specific applications  p2 <- cg_plot(cg,   y_values = serum_Ab_S ) #> Function provided to illustrate chronogram -> #>           ggplot2 interface. #>           Users are likely to want to write their own, #>           study-specific applications  p2 / p1   (p2 + scale_y_log10()) / p1 #> Warning: log-10 transformation introduced infinite values. #> Warning: log-10 transformation introduced infinite values."},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_save.html","id":null,"dir":"Reference","previous_headings":"","what":"Save a chronogram — cg_save","title":"Save a chronogram — cg_save","text":"Write chronogram disk without duplicating metadata.","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_save.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save a chronogram — cg_save","text":"","code":"cg_save(cg, file = NULL, ..., verbose = TRUE)"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_save.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save a chronogram — cg_save","text":"cg chronogram object (class cg_tbl) file quoted filename. Include extension. ... passed base::save(). example, compress verbose logical. Default TRUE. Display messages?","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_save.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save a chronogram — cg_save","text":"INVISIBLE, saved file","code":""},{"path":[]},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_save.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save a chronogram — cg_save","text":"","code":"data(\"built_smallstudy\") cg_orig <- built_smallstudy$chronogram ff <- tempfile() cg_save(cg_orig, file = ff) #> Finding metadata columns ... #> Found:  #> Writing file ... /tmp/Rtmpn6sOtz/file182434aa5ec2 cg_new <- cg_load(ff) #> Suggest save and load with the same package version: #>  Loading into : 1.0.0  #>  Saved with   : 1.0.0  #>  If version numbers are different: #>       re-generate chronogram, or update your library.  summary(cg_new == cg_orig) #>  calendar_date  elig_study_id    age            sex           dose_1        #>  Mode:logical   Mode:logical   Mode:logical   Mode:logical   Mode:logical   #>  TRUE:1947      TRUE:1947      TRUE:1947      TRUE:1947      TRUE:1947      #>                                                                             #>  date_dose_1     dose_2        date_dose_2    serum_Ab_S     serum_Ab_N     #>  Mode:logical   Mode:logical   Mode:logical   Mode:logical   Mode:logical   #>  TRUE:1947      TRUE:1947      TRUE:1947      TRUE:12        TRUE:12        #>                                               NA's:1935      NA's:1935      identical(cg_new, cg_orig) #> [1] TRUE"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_select.html","id":null,"dir":"Reference","previous_headings":"","what":"Adapted dplyr::select() to include calendar dates and ID columns — cg_select","title":"Adapted dplyr::select() to include calendar dates and ID columns — cg_select","text":"Adapted dplyr::select() include calendar dates ID columns","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adapted dplyr::select() to include calendar dates and ID columns — cg_select","text":"","code":"cg_select(cg, ...)"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adapted dplyr::select() to include calendar dates and ID columns — cg_select","text":"cg chronogram ... passed dplyr::select()","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_select.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adapted dplyr::select() to include calendar dates and ID columns — cg_select","text":"chronogram selected columns, two columns containing calendar dates participant IDs.","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_select.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adapted dplyr::select() to include calendar dates and ID columns — cg_select","text":"","code":"library(dplyr)  data(\"built_smallstudy\")  cg <- built_smallstudy$chronogram  ## keep or drop columns using selection helpers ##----------------- ## here, keep column names containing \"dose\" cg_select(cg, contains(\"dose\")) #> # A tibble:     1,947 × 6 #> # A chronogram: try summary() #>    calendar_date elig_study_id dose_1  date_dose_1 dose_2  date_dose_2 #>  * <date>        <fct>         <fct>   <date>      <fct>   <date>      #>  1 2020-01-01    1             AZD1222 2021-01-05  AZD1222 2021-02-05  #>  2 2020-01-02    1             AZD1222 2021-01-05  AZD1222 2021-02-05  #>  3 2020-01-03    1             AZD1222 2021-01-05  AZD1222 2021-02-05  #>  4 2020-01-04    1             AZD1222 2021-01-05  AZD1222 2021-02-05  #>  5 2020-01-05    1             AZD1222 2021-01-05  AZD1222 2021-02-05  #>  6 2020-01-06    1             AZD1222 2021-01-05  AZD1222 2021-02-05  #>  7 2020-01-07    1             AZD1222 2021-01-05  AZD1222 2021-02-05  #>  8 2020-01-08    1             AZD1222 2021-01-05  AZD1222 2021-02-05  #>  9 2020-01-09    1             AZD1222 2021-01-05  AZD1222 2021-02-05  #> 10 2020-01-10    1             AZD1222 2021-01-05  AZD1222 2021-02-05  #> # ℹ 1,937 more rows #> # ★ Dates: calendar_date      ★ IDs: elig_study_id #> # ★ metadata: dose_1, date_dose_1, dose_2, date_dose_2  ## Or, drop column names containing \"dose\" cg_select(cg, ! contains(\"dose\")) #> # A tibble:     1,947 × 6 #> # A chronogram: try summary() #>    calendar_date elig_study_id   age sex   serum_Ab_S serum_Ab_N #>  * <date>        <fct>         <dbl> <fct>      <dbl>      <dbl> #>  1 2020-01-01    1                40 F             NA         NA #>  2 2020-01-02    1                40 F             NA         NA #>  3 2020-01-03    1                40 F             NA         NA #>  4 2020-01-04    1                40 F             NA         NA #>  5 2020-01-05    1                40 F             NA         NA #>  6 2020-01-06    1                40 F             NA         NA #>  7 2020-01-07    1                40 F             NA         NA #>  8 2020-01-08    1                40 F             NA         NA #>  9 2020-01-09    1                40 F             NA         NA #> 10 2020-01-10    1                40 F             NA         NA #> # ℹ 1,937 more rows #> # ★ Dates: calendar_date      ★ IDs: elig_study_id #> # ★ metadata: age, sex  ## keep or drop columns using exact names ##----------------------- cg_select(cg, \"dose_1\") #> # A tibble:     1,947 × 3 #> # A chronogram: try summary() #>    calendar_date elig_study_id dose_1  #>  * <date>        <fct>         <fct>   #>  1 2020-01-01    1             AZD1222 #>  2 2020-01-02    1             AZD1222 #>  3 2020-01-03    1             AZD1222 #>  4 2020-01-04    1             AZD1222 #>  5 2020-01-05    1             AZD1222 #>  6 2020-01-06    1             AZD1222 #>  7 2020-01-07    1             AZD1222 #>  8 2020-01-08    1             AZD1222 #>  9 2020-01-09    1             AZD1222 #> 10 2020-01-10    1             AZD1222 #> # ℹ 1,937 more rows #> # ★ Dates: calendar_date      ★ IDs: elig_study_id #> # ★ metadata: dose_1 # or equivalently: cg_select(cg, dose_1) #> # A tibble:     1,947 × 3 #> # A chronogram: try summary() #>    calendar_date elig_study_id dose_1  #>  * <date>        <fct>         <fct>   #>  1 2020-01-01    1             AZD1222 #>  2 2020-01-02    1             AZD1222 #>  3 2020-01-03    1             AZD1222 #>  4 2020-01-04    1             AZD1222 #>  5 2020-01-05    1             AZD1222 #>  6 2020-01-06    1             AZD1222 #>  7 2020-01-07    1             AZD1222 #>  8 2020-01-08    1             AZD1222 #>  9 2020-01-09    1             AZD1222 #> 10 2020-01-10    1             AZD1222 #> # ℹ 1,937 more rows #> # ★ Dates: calendar_date      ★ IDs: elig_study_id #> # ★ metadata: dose_1  # or several selectors together ##--------------------------------- cg_select(cg, dose_1, dose_2) #> # A tibble:     1,947 × 4 #> # A chronogram: try summary() #>    calendar_date elig_study_id dose_1  dose_2  #>  * <date>        <fct>         <fct>   <fct>   #>  1 2020-01-01    1             AZD1222 AZD1222 #>  2 2020-01-02    1             AZD1222 AZD1222 #>  3 2020-01-03    1             AZD1222 AZD1222 #>  4 2020-01-04    1             AZD1222 AZD1222 #>  5 2020-01-05    1             AZD1222 AZD1222 #>  6 2020-01-06    1             AZD1222 AZD1222 #>  7 2020-01-07    1             AZD1222 AZD1222 #>  8 2020-01-08    1             AZD1222 AZD1222 #>  9 2020-01-09    1             AZD1222 AZD1222 #> 10 2020-01-10    1             AZD1222 AZD1222 #> # ℹ 1,937 more rows #> # ★ Dates: calendar_date      ★ IDs: elig_study_id #> # ★ metadata: dose_1, dose_2  cg_select(cg, contains(\"dose\") & contains(\"date\")) #> # A tibble:     1,947 × 4 #> # A chronogram: try summary() #>    calendar_date elig_study_id date_dose_1 date_dose_2 #>  * <date>        <fct>         <date>      <date>      #>  1 2020-01-01    1             2021-01-05  2021-02-05  #>  2 2020-01-02    1             2021-01-05  2021-02-05  #>  3 2020-01-03    1             2021-01-05  2021-02-05  #>  4 2020-01-04    1             2021-01-05  2021-02-05  #>  5 2020-01-05    1             2021-01-05  2021-02-05  #>  6 2020-01-06    1             2021-01-05  2021-02-05  #>  7 2020-01-07    1             2021-01-05  2021-02-05  #>  8 2020-01-08    1             2021-01-05  2021-02-05  #>  9 2020-01-09    1             2021-01-05  2021-02-05  #> 10 2020-01-10    1             2021-01-05  2021-02-05  #> # ℹ 1,937 more rows #> # ★ Dates: calendar_date      ★ IDs: elig_study_id #> # ★ metadata: date_dose_1, date_dose_2"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_select_visit.html","id":null,"dir":"Reference","previous_headings":"","what":"Select a visit within a windowed chronogram — cg_select_visit","title":"Select a visit within a windowed chronogram — cg_select_visit","text":"Select visit within windowed chronogram","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_select_visit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select a visit within a windowed chronogram — cg_select_visit","text":"","code":"cg_select_visit(cg, visit_col = NULL, visit = c(\"earliest\", \"latest\"))"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_select_visit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select a visit within a windowed chronogram — cg_select_visit","text":"cg windowed chronogram visit_col character vector use label column either dates visits, results. usually experimental data column. Default \"NULL\". visit either \"earliest\" \"latest\"","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_select_visit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select a visit within a windowed chronogram — cg_select_visit","text":"subsetted chronogram","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_select_visit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select a visit within a windowed chronogram — cg_select_visit","text":"","code":"data(pitch_chronogram)  SevenDaysPrePostDose2 <- cg_window_by_metadata(   pitch_chronogram, dose_2_date, 7, 7 )  SevenDaysPrePostDose2 #> # A tibble:     8,218 × 23 #> # A chronogram: try summary() #>    calendar_date ID    Centre_code Previous_infection Vaccine_interval #>  * <date>        <fct>       <int> <chr>              <chr>            #>  1 2021-03-17    100             0 Y                  LONG             #>  2 2021-03-18    100             0 Y                  LONG             #>  3 2021-03-19    100             0 Y                  LONG             #>  4 2021-03-20    100             0 Y                  LONG             #>  5 2021-03-21    100             0 Y                  LONG             #>  6 2021-03-22    100             0 Y                  LONG             #>  7 2021-03-23    100             0 Y                  LONG             #>  8 2021-03-24    100             0 Y                  LONG             #>  9 2021-03-25    100             0 Y                  LONG             #> 10 2021-03-26    100             0 Y                  LONG             #> # ℹ 8,208 more rows #> # ℹ 18 more variables: dose_1_date <date>, dose_2_date <date>, Victoria <int>, #> #   Beta <int>, Gamma <int>, Delta <chr>, Cov2_RBD_MSD <dbl>, #> #   Cov2_RBD_BAU <dbl>, Cov_2N_MSD <dbl>, Cov_2N_BAU <dbl>, Cov_2S_MSD <dbl>, #> #   Cov_2S_BAU <dbl>, HKU1_S <dbl>, MERS_S <dbl>, NL63_S <dbl>, OC43_S <dbl>, #> #   X229E_S <dbl>, Cov_1S <dbl> #> # ★ Dates: calendar_date      ★ IDs: ID #> # ★ metadata: Centre_code, Previous_infection, Vaccine_interval, dose_1_date, dose_2_date  ## every visit has the assay `Cov_2S_MSD` ## therefore use this column to indicate a study visit  SevenDaysPrePostDose2_visits <- cg_select_visit(   SevenDaysPrePostDose2, Cov_2S_MSD, \"earliest\" )  SevenDaysPrePostDose2_visits  #> # A tibble:     22 × 23 #> # A chronogram: try summary() #>    calendar_date ID    Centre_code Previous_infection Vaccine_interval #>  * <date>        <fct>       <int> <chr>              <chr>            #>  1 2021-04-10    1004            1 Y                  LONG             #>  2 2021-02-12    1009            1 Y                  LONG             #>  3 2021-03-30    1016            1 Y                  LONG             #>  4 2021-02-05    1018            1 Y                  LONG             #>  5 2021-03-15    1023            1 N                  LONG             #>  6 2021-03-12    1027            1 N                  LONG             #>  7 2021-03-28    1031            1 Y                  LONG             #>  8 2021-03-22    1034            1 Y                  LONG             #>  9 2021-03-10    1058            1 Y                  LONG             #> 10 2021-02-10    1060            1 N                  SHORT            #> # ℹ 12 more rows #> # ℹ 18 more variables: dose_1_date <date>, dose_2_date <date>, Victoria <int>, #> #   Beta <int>, Gamma <int>, Delta <chr>, Cov2_RBD_MSD <dbl>, #> #   Cov2_RBD_BAU <dbl>, Cov_2N_MSD <dbl>, Cov_2N_BAU <dbl>, Cov_2S_MSD <dbl>, #> #   Cov_2S_BAU <dbl>, HKU1_S <dbl>, MERS_S <dbl>, NL63_S <dbl>, OC43_S <dbl>, #> #   X229E_S <dbl>, Cov_1S <dbl> #> # ★ Dates: calendar_date      ★ IDs: ID #> # ★ metadata: Centre_code, Previous_infection, Vaccine_interval, dose_1_date, dose_2_date  ## all days without visits are now dropped. Compare: nrow(SevenDaysPrePostDose2) #> [1] 8218 nrow(SevenDaysPrePostDose2_visits) #> [1] 22"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_window_by_episode.html","id":null,"dir":"Reference","previous_headings":"","what":"Pick a window of dates from a chronogram: with respect to episode start. — cg_window_by_episode","title":"Pick a window of dates from a chronogram: with respect to episode start. — cg_window_by_episode","text":"Pick window dates chronogram: respect episode start.","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_window_by_episode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pick a window of dates from a chronogram: with respect to episode start. — cg_window_by_episode","text":"","code":"cg_window_by_episode(   cg,   episode_numbers_col = episode_number,   episode_handling = c(\"first\", \"last\", \"all\"),   preceding_days,   following_days )"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_window_by_episode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pick a window of dates from a chronogram: with respect to episode start. — cg_window_by_episode","text":"cg chronogram episode_numbers_col column name use episode numbers. Default episode_number. episode_handling episode reference. Must one \"first\", \"last\", \"\". preceding_days used filter( date > (date_col - preceding_days) ) following_days used filter( date < (date_col + following_days) )","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_window_by_episode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pick a window of dates from a chronogram: with respect to episode start. — cg_window_by_episode","text":"windowed chronogram","code":""},{"path":[]},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_window_by_episode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pick a window of dates from a chronogram: with respect to episode start. — cg_window_by_episode","text":"","code":"data(\"built_smallstudy\") cg <- built_smallstudy$chronogram  ## add infections to chronogram cg <- cg_add_experiment(   cg,   built_smallstudy$infections_to_add )  ## annotate infections  cg <- cg_annotate_episodes_find(    cg,    infection_cols = c(\"LFT\", \"PCR\", \"symptoms\"),    infection_present = c(\"pos\", \"Post\", \"^severe\") ) #> Parsed: infection_cols and infection_present #>            #> Searching in the [[column]], for the \"text\":  #>  #> stringr::str_detect(.data[[\"LFT\"]], \"pos\") ~ \"yes\" #>  #> stringr::str_detect(.data[[\"PCR\"]], \"Post\") ~ \"yes\" #>  #> stringr::str_detect(.data[[\"symptoms\"]], \"^severe\") ~ \"yes\" #>  #>  #> ...detecting will be exact. #>           Capitals, spelling etc must be precise #>  #> Joining with `by = join_by(calendar_date, elig_study_id)`  SevenDaysAfterFirstEpisode <- cg_window_by_episode(   cg,   episode_numbers_col = episode_number,    preceding_days = 0,    following_days = 7,   episode_handling = \"first\" )"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_window_by_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Pick a window before and after a metadata date column — cg_window_by_metadata","title":"Pick a window before and after a metadata date column — cg_window_by_metadata","text":"Pick window metadata date column","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_window_by_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pick a window before and after a metadata date column — cg_window_by_metadata","text":"","code":"cg_window_by_metadata(cg, windowing_date_col, preceding_days, following_days)"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_window_by_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pick a window before and after a metadata date column — cg_window_by_metadata","text":"cg chronogram windowing_date_col column containing reference date (must repeat date row individual's record). preceding_days used filter( date > (windowing_date_col - preceding_days) ) following_days used filter( date < (windowing_date_col + following_days) )","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_window_by_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pick a window before and after a metadata date column — cg_window_by_metadata","text":"windowed chronogram","code":""},{"path":[]},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_window_by_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pick a window before and after a metadata date column — cg_window_by_metadata","text":"","code":"data(pitch_chronogram)  pitch_chronogram #> # A tibble:     395,051 × 23 #> # A chronogram: try summary() #>    calendar_date ID    Centre_code Previous_infection Vaccine_interval #>  * <date>        <fct>       <int> <chr>              <chr>            #>  1 2020-01-01    100             0 Y                  LONG             #>  2 2020-01-02    100             0 Y                  LONG             #>  3 2020-01-03    100             0 Y                  LONG             #>  4 2020-01-04    100             0 Y                  LONG             #>  5 2020-01-05    100             0 Y                  LONG             #>  6 2020-01-06    100             0 Y                  LONG             #>  7 2020-01-07    100             0 Y                  LONG             #>  8 2020-01-08    100             0 Y                  LONG             #>  9 2020-01-09    100             0 Y                  LONG             #> 10 2020-01-10    100             0 Y                  LONG             #> # ℹ 395,041 more rows #> # ℹ 18 more variables: dose_1_date <date>, dose_2_date <date>, Victoria <int>, #> #   Beta <int>, Gamma <int>, Delta <chr>, Cov2_RBD_MSD <dbl>, #> #   Cov2_RBD_BAU <dbl>, Cov_2N_MSD <dbl>, Cov_2N_BAU <dbl>, Cov_2S_MSD <dbl>, #> #   Cov_2S_BAU <dbl>, HKU1_S <dbl>, MERS_S <dbl>, NL63_S <dbl>, OC43_S <dbl>, #> #   X229E_S <dbl>, Cov_1S <dbl> #> # ★ Dates: calendar_date      ★ IDs: ID #> # ★ metadata: Centre_code, Previous_infection, Vaccine_interval, dose_1_date, dose_2_date  SevenDaysPrePostDose2 <- cg_window_by_metadata(   pitch_chronogram, dose_2_date, 7, 7 )  SevenDaysPrePostDose2 #> # A tibble:     8,218 × 23 #> # A chronogram: try summary() #>    calendar_date ID    Centre_code Previous_infection Vaccine_interval #>  * <date>        <fct>       <int> <chr>              <chr>            #>  1 2021-03-17    100             0 Y                  LONG             #>  2 2021-03-18    100             0 Y                  LONG             #>  3 2021-03-19    100             0 Y                  LONG             #>  4 2021-03-20    100             0 Y                  LONG             #>  5 2021-03-21    100             0 Y                  LONG             #>  6 2021-03-22    100             0 Y                  LONG             #>  7 2021-03-23    100             0 Y                  LONG             #>  8 2021-03-24    100             0 Y                  LONG             #>  9 2021-03-25    100             0 Y                  LONG             #> 10 2021-03-26    100             0 Y                  LONG             #> # ℹ 8,208 more rows #> # ℹ 18 more variables: dose_1_date <date>, dose_2_date <date>, Victoria <int>, #> #   Beta <int>, Gamma <int>, Delta <chr>, Cov2_RBD_MSD <dbl>, #> #   Cov2_RBD_BAU <dbl>, Cov_2N_MSD <dbl>, Cov_2N_BAU <dbl>, Cov_2S_MSD <dbl>, #> #   Cov_2S_BAU <dbl>, HKU1_S <dbl>, MERS_S <dbl>, NL63_S <dbl>, OC43_S <dbl>, #> #   X229E_S <dbl>, Cov_1S <dbl> #> # ★ Dates: calendar_date      ★ IDs: ID #> # ★ metadata: Centre_code, Previous_infection, Vaccine_interval, dose_1_date, dose_2_date"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_window_by_visit.html","id":null,"dir":"Reference","previous_headings":"","what":"Pick a window of dates from a chronogram: with respect to visits. — cg_window_by_visit","title":"Pick a window of dates from a chronogram: with respect to visits. — cg_window_by_visit","text":"special case cg_window_by_episode(). treats visit column episode, argument episode_handling = \"\".","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_window_by_visit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pick a window of dates from a chronogram: with respect to visits. — cg_window_by_visit","text":"","code":"cg_window_by_visit(cg, visit_col = NULL, preceding_days, following_days)"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_window_by_visit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pick a window of dates from a chronogram: with respect to visits. — cg_window_by_visit","text":"cg chronogram visit_col column either dates visits, results. usually experimental data column. Default NULL. Provide unquoted. preceding_days used filter( date > (date_col - preceding_days) ) following_days used filter( date < (date_col + following_days) )","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_window_by_visit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pick a window of dates from a chronogram: with respect to visits. — cg_window_by_visit","text":"subsetted chronogram","code":""},{"path":[]},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/cg_window_by_visit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pick a window of dates from a chronogram: with respect to visits. — cg_window_by_visit","text":"","code":"data(\"built_smallstudy\") cg <- built_smallstudy$chronogram  SevenDaysAfterEachStudyVisit <- cg_window_by_visit(   cg,   visit_col = serum_Ab_S, 7, 7 )"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/check_experiment.html","id":null,"dir":"Reference","previous_headings":"","what":"check ExperimentalData — check_experiment","title":"check ExperimentalData — check_experiment","text":"check ExperimentalData","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/check_experiment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"check ExperimentalData — check_experiment","text":"","code":"check_experiment(x, cg = NULL)"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/check_experiment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"check ExperimentalData — check_experiment","text":"x tibble containing ExperimentalData, ID column date SAMPLE (date assay). cg chronogram join","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/check_experiment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"check ExperimentalData — check_experiment","text":"\"valid\" stop message","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/check_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"check metadata — check_metadata","title":"check metadata — check_metadata","text":"check metadata","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/check_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"check metadata — check_metadata","text":"","code":"check_metadata(x, cg_skeleton = NULL)"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/check_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"check metadata — check_metadata","text":"x tibble containing metadata cg_skeleton chronogram skeleton","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/check_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"check metadata — check_metadata","text":"TRUE stop message","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/chronogram.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a chronogram, from a chronogram_skeleton and metadata — chronogram","title":"Build a chronogram, from a chronogram_skeleton and metadata — chronogram","text":"Decorate chronogram skeleton metadata return chronogram. circumstances, cg_assemble() suggested (calls chronogram_skeleton() chronogram()). See assembly vignette.","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/chronogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a chronogram, from a chronogram_skeleton and metadata — chronogram","text":"","code":"chronogram(cg_skeleton, metadata)"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/chronogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a chronogram, from a chronogram_skeleton and metadata — chronogram","text":"cg_skeleton cg_skeleton, generated chronogram_skeleton() metadata tibble containing metadata ID column name (IDs) present cg_skeleton","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/chronogram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a chronogram, from a chronogram_skeleton and metadata — chronogram","text":"object chronogram class, metadata spread across calendar_dates.","code":""},{"path":[]},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/chronogram.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build a chronogram, from a chronogram_skeleton and metadata — chronogram","text":"","code":"## a 3-person chronogram_skeleton ##-------------------------------  small_study <- chronogram_skeleton(   col_ids = elig_study_id,   ids = c(1, 2, 3),   start_date = \"01012020\",   end_date = \"10102021\",   col_calendar_date = calendar_date )  ## A tibble containing some metadata for our 3 individuals ## data(smallstudy) small_study_metadata <- smallstudy$small_study_metadata small_study_metadata #> # A tibble: 3 × 7 #>   elig_study_id   age sex   dose_1   date_dose_1 dose_2   date_dose_2 #>           <dbl> <dbl> <fct> <fct>    <date>      <fct>    <date>      #> 1             1    40 F     AZD1222  2021-01-05  AZD1222  2021-02-05  #> 2             2    45 F     BNT162b2 2021-01-05  BNT162b2 2021-02-05  #> 3             3    35 M     BNT162b2 2021-01-10  BNT162b2 2021-03-10   ## Make a chronogram ## small_study_chronogram <- chronogram(   small_study,   small_study_metadata )"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/chronogram_skeleton.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a chronogram skeleton, a two column index of IDs and calendar dates, a scaffold for a chronogram — chronogram_skeleton","title":"Build a chronogram skeleton, a two column index of IDs and calendar dates, a scaffold for a chronogram — chronogram_skeleton","text":"Assemble chronogram skeleton start end dates, vector participant IDs. circumstances, cg_assemble() suggested (calls chronogram_skeleton() chronogram()). See assembly vignette.","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/chronogram_skeleton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a chronogram skeleton, a two column index of IDs and calendar dates, a scaffold for a chronogram — chronogram_skeleton","text":"","code":"chronogram_skeleton(   ids = NULL,   col_ids = column_name_for_ids,   start_date = NULL,   end_date = NULL,   col_calendar_date = column_name_for_calendar_date )"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/chronogram_skeleton.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a chronogram skeleton, a two column index of IDs and calendar dates, a scaffold for a chronogram — chronogram_skeleton","text":"ids vector study, participant IDs. col_ids label ID column. Default column_name_for_ids (unquoted). Studies may use StudyID, StudyId, PID, etc. start_date start date, format recognised lubridate::dmy() end_date end date, format recognised lubridate::dmy() col_calendar_date label date column. Default column_name_for_calendar_date (unquoted).","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/chronogram_skeleton.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a chronogram skeleton, a two column index of IDs and calendar dates, a scaffold for a chronogram — chronogram_skeleton","text":"chronogram skeleton (class tbl_df, extra attributes).","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/chronogram_skeleton.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build a chronogram skeleton, a two column index of IDs and calendar dates, a scaffold for a chronogram — chronogram_skeleton","text":"","code":"##----------------------------------------------------------------- small_study <- chronogram_skeleton(   ids = c(1, 2, 3),   start_date = \"01012020\",   end_date = \"10102021\" )  ## These examples fail ##------------------------------------------ ## Duplicate dates, or dates lubridate::dmy() does not recognise ## small_study <- try( chronogram_skeleton(   ids = c(1, 2, 3),   start_date = c(\"01012020\", \"05012020\"),   end_date = \"10102021\") ) #> Error in chronogram_skeleton(ids = c(1, 2, 3), start_date = c(\"01012020\",  :  #>   More than 1 start dates provided! small_study <- try( chronogram_skeleton(   ids = c(1, 2, 3),   start_date = c(\"01012020\"),   end_date = c(\"10102021\", \"20102020\")) ) #> Error in chronogram_skeleton(ids = c(1, 2, 3), start_date = c(\"01012020\"),  :  #>   More than 1 end dates provided! small_study <- try( chronogram_skeleton(   ids = c(1, 2, 3),   start_date = \"20200101\",   end_date = \"10102021\") ) #> Error in chronogram_skeleton(ids = c(1, 2, 3), start_date = \"20200101\",  :  #>   Start date failed to parse! Provide in dmy format. small_study <- try( chronogram_skeleton(   ids = c(1, 2, 3),   start_date = \"01012020\",   end_date = \"20201010\") ) #> Error in chronogram_skeleton(ids = c(1, 2, 3), start_date = \"01012020\",  :  #>   End date failed to parse! Provide in dmy format.  ## Duplicate participant IDs are accepted, but give a warning ## small_study <- chronogram_skeleton(   ids = c(1, 2, 3, 3),   start_date = \"01012020\",   end_date = \"10102021\" ) #> Warning: Duplicate IDs found :  3 Check your input ID vector... #>       provide a unique identifier for #>       each individual #> Returning a de-duplicated chronogram_skeleton..."},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/dplyr_row_slice.cg_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Extending dplyr to chronogram — dplyr_row_slice.cg_tbl","title":"Extending dplyr to chronogram — dplyr_row_slice.cg_tbl","text":"functions extend dplyr S3 methods class cg_tbl grouped_cg_tbl.","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/dplyr_row_slice.cg_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extending dplyr to chronogram — dplyr_row_slice.cg_tbl","text":"","code":"# S3 method for class 'cg_tbl' dplyr_row_slice(data, i, ...)  # S3 method for class 'cg_tbl' dplyr_col_modify(data, cols)  # S3 method for class 'cg_tbl' dplyr_reconstruct(data, template)  # S3 method for class 'grouped_cg_df' dplyr_row_slice(data, i, ..., preserve = FALSE)  group_data_trim(group_data)  # S3 method for class 'grouped_cg_df' dplyr_col_modify(data, cols)  # S3 method for class 'grouped_cg_df' dplyr_reconstruct(data, template)"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/dplyr_row_slice.cg_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extending dplyr to chronogram — dplyr_row_slice.cg_tbl","text":"data data rows eg slice ... additional arguments cols columns eg mutate template example class preserve FALSE group_data grouped dataset","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/dplyr_row_slice.cg_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extending dplyr to chronogram — dplyr_row_slice.cg_tbl","text":"cg_tbl grouped_cg_tbl dplyr verb action cg_tbl dplyr verb action","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/dplyr_row_slice.cg_tbl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extending dplyr to chronogram — dplyr_row_slice.cg_tbl","text":"Approach recommended : https://dplyr.tidyverse.org/reference/dplyr_extending.html user can usually ignore, documentation provided case edge case encountered.","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/dplyr_row_slice.cg_tbl.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Extending dplyr to chronogram — dplyr_row_slice.cg_tbl","text":"dplyr:::group_data_trim","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/glimpse.cg_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Glimpse S3 method for chronogram objects (class cg_tbl) — glimpse.cg_tbl","title":"Glimpse S3 method for chronogram objects (class cg_tbl) — glimpse.cg_tbl","text":"Glimpse S3 method chronogram objects (class cg_tbl)","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/glimpse.cg_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Glimpse S3 method for chronogram objects (class cg_tbl) — glimpse.cg_tbl","text":"","code":"# S3 method for class 'cg_tbl' glimpse(x, width = NULL, ...)"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/glimpse.cg_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Glimpse S3 method for chronogram objects (class cg_tbl) — glimpse.cg_tbl","text":"x chrongram width, ... passed pillar::glimpse","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/glimpse.cg_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Glimpse S3 method for chronogram objects (class cg_tbl) — glimpse.cg_tbl","text":"print console","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/glimpse.cg_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Glimpse S3 method for chronogram objects (class cg_tbl) — glimpse.cg_tbl","text":"","code":"library(dplyr) data(\"built_smallstudy\") cg <- built_smallstudy$chronogram glimpse(cg) #> Glimpse: chronogram  #>  Dates column:  calendar_date  #>  IDs column:    elig_study_id  #>  #> Metadata #> Rows: 1,947 #> Columns: 6 #> $ age         <dbl> 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40… #> $ sex         <fct> F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F… #> $ dose_1      <fct> AZD1222, AZD1222, AZD1222, AZD1222, AZD1222, AZD1222, AZD1… #> $ date_dose_1 <date> 2021-01-05, 2021-01-05, 2021-01-05, 2021-01-05, 2021-01-0… #> $ dose_2      <fct> AZD1222, AZD1222, AZD1222, AZD1222, AZD1222, AZD1222, AZD1… #> $ date_dose_2 <date> 2021-02-05, 2021-02-05, 2021-02-05, 2021-02-05, 2021-02-0… #>  #> Experiment data & annotations #> Rows: 1,947 #> Columns: 2 #> $ serum_Ab_S <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ serum_Ab_N <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/glimpse.grouped_cg_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Glimpse S3 method for grouped chronogram objects (class grouped_cg_df) — glimpse.grouped_cg_df","title":"Glimpse S3 method for grouped chronogram objects (class grouped_cg_df) — glimpse.grouped_cg_df","text":"Glimpse S3 method grouped chronogram objects (class grouped_cg_df)","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/glimpse.grouped_cg_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Glimpse S3 method for grouped chronogram objects (class grouped_cg_df) — glimpse.grouped_cg_df","text":"","code":"# S3 method for class 'grouped_cg_df' glimpse(x, width = NULL, ...)"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/glimpse.grouped_cg_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Glimpse S3 method for grouped chronogram objects (class grouped_cg_df) — glimpse.grouped_cg_df","text":"x grouped chrongram width, ... passed pillar::glimpse","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/glimpse.grouped_cg_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Glimpse S3 method for grouped chronogram objects (class grouped_cg_df) — glimpse.grouped_cg_df","text":"print console","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/glimpse.grouped_cg_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Glimpse S3 method for grouped chronogram objects (class grouped_cg_df) — glimpse.grouped_cg_df","text":"","code":"library(dplyr)  data(\"built_smallstudy\") cg <- built_smallstudy$chronogram cg <- cg %>% group_by(elig_study_id) glimpse(cg) #> Glimpse: grouped chronogram  #>  Groups:        elig_study_id  #>  Dates column:  calendar_date  #>  IDs column:    elig_study_id  #>  #> Metadata #> Rows: 1,947 #> Columns: 6 #> $ age         <dbl> 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40… #> $ sex         <fct> F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F… #> $ dose_1      <fct> AZD1222, AZD1222, AZD1222, AZD1222, AZD1222, AZD1222, AZD1… #> $ date_dose_1 <date> 2021-01-05, 2021-01-05, 2021-01-05, 2021-01-05, 2021-01-0… #> $ dose_2      <fct> AZD1222, AZD1222, AZD1222, AZD1222, AZD1222, AZD1222, AZD1… #> $ date_dose_2 <date> 2021-02-05, 2021-02-05, 2021-02-05, 2021-02-05, 2021-02-0… #>  #> Experiment data & annotations #> Rows: 1,947 #> Columns: 2 #> $ serum_Ab_S <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ serum_Ab_N <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/glimpse_experiment_data.cg_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Glimpse S3 method for experiment data from chronogram objects (class cg_tbl) — glimpse_experiment_data","title":"Glimpse S3 method for experiment data from chronogram objects (class cg_tbl) — glimpse_experiment_data","text":"Glimpse S3 method experiment data chronogram objects (class cg_tbl)","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/glimpse_experiment_data.cg_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Glimpse S3 method for experiment data from chronogram objects (class cg_tbl) — glimpse_experiment_data","text":"","code":"glimpse_experiment_data(x, width = NULL, ...)  # S3 method for class 'cg_tbl' glimpse_experiment_data(x, width = NULL, ...)"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/glimpse_experiment_data.cg_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Glimpse S3 method for experiment data from chronogram objects (class cg_tbl) — glimpse_experiment_data","text":"x chrongram width, ... passed pillar::glimpse","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/glimpse_experiment_data.cg_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Glimpse S3 method for experiment data from chronogram objects (class cg_tbl) — glimpse_experiment_data","text":"print console","code":""},{"path":[]},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/glimpse_experiment_data.cg_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Glimpse S3 method for experiment data from chronogram objects (class cg_tbl) — glimpse_experiment_data","text":"","code":"data(\"built_smallstudy\") cg <- built_smallstudy$chronogram glimpse_experiment_data(cg) #> Experiment data & annotations #> Rows: 1,947 #> Columns: 2 #> $ serum_Ab_S <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ serum_Ab_N <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/glimpse_metadata.cg_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Glimpse S3 method for metadata from chronogram objects (class cg_tbl) — glimpse_metadata","title":"Glimpse S3 method for metadata from chronogram objects (class cg_tbl) — glimpse_metadata","text":"Glimpse S3 method metadata chronogram objects (class cg_tbl)","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/glimpse_metadata.cg_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Glimpse S3 method for metadata from chronogram objects (class cg_tbl) — glimpse_metadata","text":"","code":"glimpse_metadata(x, width = NULL, ...)  # S3 method for class 'cg_tbl' glimpse_metadata(x, width = NULL, ...)"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/glimpse_metadata.cg_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Glimpse S3 method for metadata from chronogram objects (class cg_tbl) — glimpse_metadata","text":"x chrongram width, ... passed pillar::glimpse","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/glimpse_metadata.cg_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Glimpse S3 method for metadata from chronogram objects (class cg_tbl) — glimpse_metadata","text":"print console","code":""},{"path":[]},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/glimpse_metadata.cg_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Glimpse S3 method for metadata from chronogram objects (class cg_tbl) — glimpse_metadata","text":"","code":"data(\"built_smallstudy\") cg <- built_smallstudy$chronogram glimpse_metadata(cg) #> Metadata #> Rows: 1,947 #> Columns: 6 #> $ age         <dbl> 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40… #> $ sex         <fct> F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F… #> $ dose_1      <fct> AZD1222, AZD1222, AZD1222, AZD1222, AZD1222, AZD1222, AZD1… #> $ date_dose_1 <date> 2021-01-05, 2021-01-05, 2021-01-05, 2021-01-05, 2021-01-0… #> $ dose_2      <fct> AZD1222, AZD1222, AZD1222, AZD1222, AZD1222, AZD1222, AZD1… #> $ date_dose_2 <date> 2021-02-05, 2021-02-05, 2021-02-05, 2021-02-05, 2021-02-0…"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/group_by.cg_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"group-by & ungroup-by chronogram — group_by.cg_tbl","title":"group-by & ungroup-by chronogram — group_by.cg_tbl","text":"S3 implementation dplyr::group_by() accepts chronogram returns object grouped_cg_df class & reverse dplyr::ungroup_by(). S3 implementation dplyr::ungroup() accepts grouped_cg_df returns chronogram. retains attributes orginal chronogram.","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/group_by.cg_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"group-by & ungroup-by chronogram — group_by.cg_tbl","text":"","code":"# S3 method for class 'cg_tbl' group_by(.data, ..., .add = FALSE, .drop = dplyr::group_by_drop_default(.data))  # S3 method for class 'grouped_cg_df' ungroup(x, ...)"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/group_by.cg_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"group-by & ungroup-by chronogram — group_by.cg_tbl","text":".data input chronogram, cg_tbl ..., .add, .drop arguments expected group_by S3 x input chronogram, grouped_cg_df","code":""},{"path":[]},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/new_grouped_chronogram.html","id":null,"dir":"Reference","previous_headings":"","what":"New grouped chronogram — new_grouped_chronogram","title":"New grouped chronogram — new_grouped_chronogram","text":"constructor grouped chronogram. called automatically S3 method: group_by.cg_tbl().","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/new_grouped_chronogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"New grouped chronogram — new_grouped_chronogram","text":"","code":"new_grouped_chronogram(x, groups, ..., class = character())"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/new_grouped_chronogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"New grouped chronogram — new_grouped_chronogram","text":"x chronogram groups groups ... parsed dplyr::group_by() class character vector class","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/new_grouped_chronogram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"New grouped chronogram — new_grouped_chronogram","text":"extended grouped tibble class grouped_cg_df","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/new_tbl2chronogram.html","id":null,"dir":"Reference","previous_headings":"","what":"new_tbl2chronogram — new_tbl2chronogram","title":"new_tbl2chronogram — new_tbl2chronogram","text":"Coerce tibble chronogram. function handles grouped chronograms. See chronogram::chronogram() constructor.","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/new_tbl2chronogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"new_tbl2chronogram — new_tbl2chronogram","text":"","code":"new_tbl2chronogram(x, ..., class = character())"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/new_tbl2chronogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"new_tbl2chronogram — new_tbl2chronogram","text":"x tibble coerce ... passed tibble::new_tibble() class character vector classes","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/pitch_chronogram.html","id":null,"dir":"Reference","previous_headings":"","what":"PITCH study: pre-built chronogram — pitch_chronogram","title":"PITCH study: pre-built chronogram — pitch_chronogram","text":"provided example derived de-identified PITCH dataset available , CC--4.0 licence: https://data.mendeley.com/datasets/fyp26zjgmj/1","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/pitch_chronogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PITCH study: pre-built chronogram — pitch_chronogram","text":"","code":"pitch_chronogram"},{"path":[]},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/pitch_chronogram.html","id":"pitch-chronogram-a-chronogram","dir":"Reference","previous_headings":"","what":"pitch_chronogram A chronogram","title":"PITCH study: pre-built chronogram — pitch_chronogram","text":"pitch_chronogram Example pitch_chronogram","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/pitch_chronogram.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"PITCH study: pre-built chronogram — pitch_chronogram","text":"Published: 3 November 2021, DOI: 10.17632/fyp26zjgmj.1 Contributors: Rebecca Payne, Susan Hopkins, Victoria Hall, Christina Dold, Christopher Duncan, Alex Richter, Miles Carroll, Gavin Screaton, Thushan de Silva, Lance Turtle, Paul Klenerman, Susanna Dunachie, PITCH Consortium authors. dataset supports Payne et al. Immunogenicity standard extended dosing intervals BNT162b2 mRNA vaccine Cell 2021. NOTE: Changes made de-identified public dataset (DOI: 10.17632/fyp26zjgmj.1). public data reports dates MM/YYYY. build chronogram assumed 15/MM/YYYY dose 1, used available intervals days place remaining data time. illustration purposes, need plausible DD/MM/YYYY dates - real. public dataset used example (assays included). NB: motivation re-analyse Payne et al. scientific reasons, rather explore package, use example dataset. Instead, consult de-identified Mendeley data (DOI: 10.17632/fyp26zjgmj.1), Cell manuscript's data code availability statement.","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/pitch_chronogram.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PITCH study: pre-built chronogram — pitch_chronogram","text":"","code":"data(\"pitch_chronogram\")"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/smallstudy.html","id":null,"dir":"Reference","previous_headings":"","what":"Small study — smallstudy","title":"Small study — smallstudy","text":"fictional covid-19 vaccine study 3 individuals. Provided vector participant IDs, tibble metadata, tibble experimental data.","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/smallstudy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Small study — smallstudy","text":"","code":"smallstudy"},{"path":[]},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/smallstudy.html","id":"smallstudy-a-list-of-three-components","dir":"Reference","previous_headings":"","what":"smallstudy A list of three components","title":"Small study — smallstudy","text":"small_study_ids IDs used small study identify 3 individuals. vector. small_study_metadata Example metadata. tibble. small_study_Ab Example experimental data. tibble.","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/smallstudy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Small study — smallstudy","text":"","code":"data(\"smallstudy\")"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/tidyeval.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy eval helpers — tidyeval","title":"Tidy eval helpers — tidyeval","text":"page lists tidy eval tools reexported package rlang. learn using tidy eval scripts packages high level, see dplyr programming vignette ggplot2 packages vignette. Metaprogramming section Advanced R may also useful deeper dive. tidy eval operators {{, !!, !!! syntactic constructs specially interpreted tidy eval functions. mostly need {{, !! !!! advanced operators use simple cases. curly-curly operator {{ allows tunnel data-variables passed function arguments inside tidy eval functions. {{ designed individual arguments. pass multiple arguments contained dots, use ... normal way.   enquo() enquos() delay execution one several function arguments. former returns single expression, latter returns list expressions. defused, expressions longer evaluate . must injected back evaluation context !! (single expression) !!! (list expressions).   simple case, code equivalent usage {{ ... . Defusing enquo() enquos() needed complex cases, instance need inspect modify expressions way. .data pronoun object represents current slice data. variable name string, use .data pronoun subset variable [[.   Another tidy eval operator :=. makes possible use glue curly-curly syntax LHS =. technical reasons, R language support complex expressions left =, use := workaround.   Many tidy eval functions like dplyr::mutate() dplyr::summarise() give automatic name unnamed inputs. need create sort automatic names , use as_label(). instance, glue-tunnelling syntax can reproduced manually :   Expressions defused enquo() (tunnelled {{) need simple column names, can arbitrarily complex. as_label() handles cases gracefully. code assumes simple column name, use as_name() instead. safer throws error input name expected.","code":"my_function <- function(data, var, ...) {   data %>%     group_by(...) %>%     summarise(mean = mean({{ var }})) } my_function <- function(data, var, ...) {   # Defuse   var <- enquo(var)   dots <- enquos(...)    # Inject   data %>%     group_by(!!!dots) %>%     summarise(mean = mean(!!var)) } my_var <- \"disp\" mtcars %>% summarise(mean = mean(.data[[my_var]])) my_function <- function(data, var, suffix = \"foo\") {   # Use `{{` to tunnel function arguments and the usual glue   # operator `{` to interpolate plain strings.   data %>%     summarise(\"{{ var }}_mean_{suffix}\" := mean({{ var }})) } my_function <- function(data, var, suffix = \"foo\") {   var <- enquo(var)   prefix <- as_label(var)   data %>%     summarise(\"{prefix}_mean_{suffix}\" := mean(!!var)) }"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/validate_chronogram.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate chronogram — validate_chronogram","title":"Validate chronogram — validate_chronogram","text":"Checks :","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/validate_chronogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate chronogram — validate_chronogram","text":"","code":"validate_chronogram(x)"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/validate_chronogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate chronogram — validate_chronogram","text":"x chronogram object (class cg_tbl)","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/validate_chronogram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate chronogram — validate_chronogram","text":"TRUE valid","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/validate_chronogram.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate chronogram — validate_chronogram","text":"class cg_tbl date column stored attributes present data ID column stored attributes present data date x participant ID present (absent). Rarely needed user. cg_assemble() annotation functions use check returned cg valid.","code":""},{"path":[]},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/validate_chronogram_skeleton.html","id":null,"dir":"Reference","previous_headings":"","what":"validate chronogram skeleton — validate_chronogram_skeleton","title":"validate chronogram skeleton — validate_chronogram_skeleton","text":"validate chronogram skeleton","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/validate_chronogram_skeleton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"validate chronogram skeleton — validate_chronogram_skeleton","text":"","code":"validate_chronogram_skeleton(x)"},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/validate_chronogram_skeleton.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"validate chronogram skeleton — validate_chronogram_skeleton","text":"x chronogram skeleton object (class tbl_df, attributes record IDs date columns)","code":""},{"path":"https://franciscrickinstitute.github.io/chronogram/reference/validate_chronogram_skeleton.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"validate chronogram skeleton — validate_chronogram_skeleton","text":"Errors, TRUE valid chronogram skeleton","code":""}]
